// Base version of dynamic report blocks.
// This script cleans existing MySQL connections, and MYSQL blocks and
// creates new connection and required default report query blocks
// Date : 20-May-2022 Base Version
// Date : 24-May-2022 Fix Made for MHD-4265  and MHD-4260
// Date : 09-Jun-2022 MHD-4181 , MHD-4033 AND MHD-4531 Instance TCO block update to avoid the duplicate records for single instance for single cloud provider
// Date : 10-Jun-2022 MHD-4578 Add Default Reports as part of development
// Date : 15-Jun-2022 MHD-4033 and MHD-4028 to address service eosl and software packages  blocks
// Date : 22-Jun-2022 MHD-4638 for IAAS, PAAS TCO columns separately in reports and moving inventory report to dynamic reports
// Date : 27-Jun-2022 MHD-4527 to remove the number of connections from port communication blocks

use aiops-dev;
db.block.deleteMany({"plugin" : "MySQL"});
db.account.deleteMany({"plugin" : "MySQL"});
db.block.deleteMany({"plugin" : "MySql"});
db.account.deleteMany({"plugin" : "MySql"});

db.account.insert({
        "name"  : "Discovery",
                "plugin" : "MySQL",
                "host" : "mysql",
                "port" : "3306",
        "userName" : "root",
        "password" : "ZDZxRUFmVGZ3I0M1dk8yOUNaUmk=",
                "schema" : "discovery",
                "createdAt": new Date(),
                "url" : " "}) ;

db.block.insert({
        "name"  : "Utilization Collection Job Status","queryType" : "query","reportType" : "table","query" : "SELECT host.ip, COUNT(utilization.id) as 'Utilization Count' FROM host LEFT JOIN    utilization ON utilization.host_id = host.id WHERE historic = 0 GROUP BY host.ip ORDER BY 2 DESC;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Monitor","description" : "Monitors Utilization captured  from hosts.","existing" : "no"}) ;
db.block.insert({
        "name"  : "Port Collection Job Status","queryType" : "query","reportType" : "table","query" : "SELECT host.ip, COUNT(port.id) as 'Port Collection Count' FROM host LEFT JOIN port ON port.host_id = host.id WHERE historic = 0 GROUP BY host.ip ORDER BY 2 DESC;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Monitor","description" : "Monitors port collection data for discovered hosts ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Job Execution Status(Utilization & Port Summary)","queryType" : "query","reportType" : "table","query" : "SELECT 'Port Summary ' ,max(db_updated_datetime) as 'Last Run ' from port_summary union SELECT 'Utlization Summary ' ,max(db_created_datetime) as 'Last Run ' from utilization_summary;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Monitor","description" : "Utilization Summary and Port Summary Jobs Execution Status","existing" : "no"}) ;
db.block.insert({
        "name"  : "Application Assessment Summary","queryType" : "query","reportType" : "table","query" : "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', (SELECT GROUP_CONCAT(CONCAT(' ', host.name)) FROM host JOIN application_host_mapping ahm ON ahm.host_id = host.id WHERE ahm.application_id = app.id) AS 'Host Names', (SELECT COUNT(DISTINCT host.name) FROM host JOIN application_host_mapping ahm ON ahm.host_id = host.id WHERE ahm.application_id = app.id) AS 'Number Of Hosts in Application', aas.migration_strategy AS 'Migration Strategy', aas.migration_complexity AS 'Migration Complexity', aas.migration_priority AS 'Migration Priority', aas.wave_group AS 'Application Migration Group', (SELECT GROUP_CONCAT(DISTINCT eol_status) FROM instance_assessment_summary ias JOIN application_host_mapping ahm ON ahm.host_id = ias.host_id WHERE ahm.application_id = app.id and ias.cloud_provider = cloud_providers.name) AS 'OS EOSL Status', (SELECT GROUP_CONCAT(DISTINCT eol_status) FROM service_assessment_summary sas JOIN service ON service.id = sas.service_id JOIN application_host_mapping ahm ON ahm.host_id = service.host_id WHERE ahm.application_id = app.id AND sas.cloud_provider = cloud_providers.name) AS 'Service EOSL Status', app.name AS 'Application with Environment', cloud_providers.name AS 'Cloud_provider' FROM  application app JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cloud_providers.name ORDER BY cloud_providers.name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Assessments summary details for Application migration strategy, Application migration Complexity and wave group","existing" : "no"}) ;
db.block.insert({
        "name"  : "Application Summary Details","queryType" : "query","reportType" : "table","query" : "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.os_recommendation AS 'OS Recommendation', ias.os_recommended_version AS 'OS Recommended Version', ias.server_type AS 'Server Type', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', mssql_oracle.serverEdition AS 'DBServer Edition', mssql_oracle.sid AS 'SIDs', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id), (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), app.name, ''), ',,', ',') AS 'Discovered Dependent Apps', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(DISTINCT application_id) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', app.name AS 'Application With Environment', cp.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN service ON ahm.host_id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cp.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cp.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cp.name LEFT JOIN (SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct ms.serverEdition) AS serverEdition, 'MSSQL' FROM  host h JOIN service ON service.host_id = h.id    AND service.type = 'Database'   AND service.name = 'mssql' JOIN mssql_service ms ON ms.hostid = h.id WHERE   h.historic = 0 AND ms.status = 'Completed'   group by host_id,service.id UNION ALL SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct IF(IFNULL(ms.edition, '') = 'EE', 'Enterprise Edition', ms.edition)) AS serverEdition, 'Oracle' FROM host h JOIN service ON service.host_id = h.id AND service.type = 'Database' AND service.name = 'oracle' JOIN oracle_service ms ON ms.hostid = h.id WHERE h.historic = 0 AND ms.status = 'Completed'  group by h.id,service.id  ) AS mssql_oracle ON mssql_oracle.host_id = ahm.host_id AND mssql_oracle.service_id = service.id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(10, '%%') AND app.id LIKE IFNULL(NULL, '%%') AND host_outer.id IN (SELECT ahm1.host_id FROM application_host_mapping ahm1 WHERE ahm1.application_id LIKE IFNULL(NULL, '%%')) ORDER BY cp.name; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Application  and its underlying hosts and services details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Application Interfacing Details","queryType" : "query","reportType" : "table","query" : "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host.name AS 'Host Name', host.ip AS 'Local IP Address', (SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping_review ahm1 JOIN host host1 ON host1.id = ahm1.host_id JOIN application_review app1 ON app1.id = ahm1.application_id WHERE host1.id = ps.host_id) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.foreign_address AS 'Foreign IP Address', ps.foreign_host_name AS 'Foreign Host Name', ps.undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping_review ahm2 JOIN application_review app2 ON app2.id = ahm2.application_id JOIN host host2 ON host2.id = ahm2.host_id WHERE host2.ip = (SELECT ip AS ip_address FROM public_private_ip_lookup pip WHERE pip.private_ip = ps.foreign_address LIMIT 1) AND host2.historic = 0) AS 'Foreign Host Mapped Apps', network AS 'Network', ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.direction AS Direction, ps.used_interface AS UsedInterface, ps.status AS Status, ps.protocol AS Protocol, app.name AS 'Application Name With Environment' FROM port_summary ps JOIN host host ON ps.host_id = host.id JOIN application_host_mapping_review ahm1 ON host.id = ahm1.host_id JOIN application_review app ON app.id = ahm1.application_id AND host.id = ahm1.host_id AND host.historic = 0 AND host.status = 'success' AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'ip' AND active = 1 AND VALUE = ps.local_address) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'port' AND active = 1 AND VALUE = ps.local_port_number) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'service' AND active = 1 AND VALUE = ps.local_service) AND ahm1.application_id LIKE IFNULL(NULL, '%%');", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Application Dependency based on port communications","existing" : "no"}) ;
db.block.insert({
        "name"  : "Application TCO Right Sizing","queryType" : "query","reportType" : "table","query" : "SELECT LEFT(app.name,LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', GROUP_CONCAT(tcp.`Host Name`) AS 'Host Names', COUNT(tcp.`IP Address`) AS 'Host Count', SUM(tcp.`vCPU Count`) AS 'Logical Processors', SUM(tcp.`Storage(GB)`) AS 'Total Storage', tcp.`FS Types` AS 'FS Types', SUM(tcp.`Memory(GB)`) AS 'Total Memory', ROUND(tcp.`Avg CPU Usage(%)`, 2) AS 'CPU Usage%', sum(tcp.`IAAS On Demand Price($)`) AS `IAAS OnDemand Price`, sum(tcp.`IAAS Reserved 1 year Price($)`) AS `IAAS Reserved 1 year Price`, sum(tcp.`IAAS Reserved 3 year Price($)`) AS `IAAS Reserved 3 year Price`, sum(tcp.`PAAS On Demand Price($)`) AS `PAAS OnDemand Price`, sum(tcp.`PAAS Reserved 1 year Price($)`) AS `PAAS Reserved 1 year Price`, sum(tcp.`PAAS Reserved 3 year Price($)`) AS `PASS Reserved 3 year Price`, sum(tcp.`Yearly Storage Price($)`) AS `Storage Price Yearly`, sum(tcp.`IAAS Recommended On Demand Price($)`) AS `IAAS Recommended On Demand Price`, sum(tcp.`IAAS Recommended 1 year Price($)`) AS `IAAS Recommended 1 year Price`, sum(tcp.`IAAS Recommended 3 year Price($)`) AS `IAAS Recommended 3 year Price`, sum(tcp.`PAAS Recommended On Demand Price($)`) AS `PAAS Recommended On Demand Price`, sum(tcp.`PAAS Recommended 1 year Price($)`) AS `PAAS Recommended 1 year Price`, sum(tcp.`PAAS Recommended 3 year Price($)`) AS `PASS Recommended 3 year Price`, sum(tcp.`Recommended Storage Price`) AS `Recommended Storage Price Yearly`, app.name AS 'Application With Environment', tcp.`cloud Provider` AS 'Cloud Provider' FROM  tco_prices_consolidated tcp join cloud_providers on cloud_providers.enable = 'True' and  cloud_providers.name = tcp.`cloud Provider` JOIN application_host_mapping_review ahm ON ahm.host_id = tcp.host_id JOIN application_review app ON app.id = ahm.application_id group by tcp.`cloud Provider`, app.name ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Application Right Sizing and TCO Information","existing" : "no"}) ;
db.block.insert({
        "name"  : "Instance Assessment Summary","queryType" : "query","reportType" : "table","query" : "SELECT distinct host.name as 'Host Name',host.ip as  'IP Address' , host.domain as 'Domain Name' , host.platform as Platform, host.operating_system as 'Operating System', concat(operating_system,' ',version) as 'OS Version', ias.server_type as 'Server Type', (SELECT GROUP_CONCAT(app.name) FROM application_review app JOIN application_host_mapping_review ahm ON app.id = ahm.application_id where ahm.host_id = host.id ) AS 'Applications' ,ias.cpu_utilization as 'CPU Utilization', ias.memory_utilization as  'Memory Utilization' , ias.storage_utilization as  'Storage Utilization' , ias.instance_activity as 'Instance Activity' , ias.migration_priority as 'Migration Priority', ias.eol_status  as 'OS EOL Status', ias.support_date as 'OS Support End Date' , ias.os_recommended_version as 'OS Recommended Version',  ias.migration_strategy as 'Migration Strategy', ias.migration_type  as 'Migration Type',  ias.cloud_provider  as 'Cloud Provider' from host left join instance_assessment_summary ias on ias.host_id = host.id left join cloud_providers on ias.cloud_provider =cloud_providers.name and cloud_providers.enable = 'True' where host.historic = 0;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Instance Assessments Summary","existing" : "no"}) ;
db.block.insert({
        "name"  : "Instance TCO Right Sizing","queryType" : "query","reportType" : "table","query" : "SELECT `Host Name`, `IP Address`, `Domain Name`, `Platform`, `Operating System`, `OS Version`, `Server Type`, `Data Center`, `Line of Business`, `Region`, `Environment`, `Project`, `vCPU Count`, `Memory(GB)`, `Storage(GB)`, `FS Types`, `Cloud Instance Type`, `pass_service_name`, `IAAS On Demand Price($)`, `IAAS Reserved 1 year Price($)`, `IAAS Reserved 3 year Price($)`, `PAAS On Demand Price($)`, `PAAS Reserved 1 year Price($)`, `PAAS Reserved 3 year Price($)`, `Cloud Storage Type`, `Yearly Storage Price($)`, `Avg CPU Usage(%)`, `Cloud Recommended vCPU Count`, `Avg Memory Usage(%)`, `Cloud Recommended Memory`, `Storage Usage(%)`, `IAAS Recommended Instance Type`, `IAAS Recommended On Demand Price($)`, `IAAS Recommended 1 year Price($)`, `IAAS Recommended 3 year Price($)`, `PAAS Recommended Instance Type`, `PAAS Recommended On Demand Price($)`, `PAAS Recommended 1 year Price($)`, `PAAS Recommended 3 year Price($)`, `Recommended Storage(GB)`, `Recommended Storage Price`, `Application`, `Cloud Provider` FROM tco_prices_consolidated ORDER BY tco_prices_consolidated.`Cloud Provider` ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Instances Right Sizing and TCO information","existing" : "no"}) ;
db.block.insert({
        "name"  : "Host Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS Domain, host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS Version, IFNULL(ip.data_center, ' ') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, ' ') AS 'Region', IFNULL(ip.environment, ' ') AS 'Environment', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', GROUP_CONCAT(DISTINCT IFNULL(application_review.name, ' ')) AS 'Application Name', host.device_type AS 'Device Type', host.instance_type AS 'Instance Type', host.manufacturer AS Manufacturer, host.product_name AS 'Product Name', host.serial_number AS 'Serial No', host.service_provider AS 'Service Provider', host.bios_configuration AS 'BIOS Configuration', host.instruction_set AS 'Instruction Set', host.sku AS SKU, host.installed_on AS 'Installed On', host.`memory` AS `Memory`, cpu.logical_processors AS 'Logical Processors', host.timezone AS Timezone, host.uptime AS Uptime, host.pagefile_size AS 'Pagefile Size', host.internet_access AS 'Internet Access', host.rdc AS Rdc, host.gateway_ip AS 'Gateway IP', host.system_date AS 'System Date', host.power_status AS 'Power Status' FROM host JOIN ip ON ip.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN cpu ON cpu.host_id = host.id LEFT JOIN application_host_mapping_review ON application_host_mapping_review.host_id = host.id AND application_host_mapping_review.active = 1 LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND cloud_providers.name = ias.cloud_provider LEFT JOIN application_review ON application_review.id = application_host_mapping_review.application_id WHERE host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' GROUP BY host.id;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "View all host details","existing" : "no"}) ;
db.block.insert({
        "name"  : "App Host,Service counts","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'app_name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', app.id, COUNT(DISTINCT ahm.host_id) AS 'Instance Count ', (SELECT COUNT(*) FROM service JOIN host ON host.id = service.host_id WHERE host.id = ahm.host_id AND host.historic = 0) AS 'Service Count', COUNT(DISTINCT dap.id) AS 'Shared Application Count', COUNT(DISTINCT dahm.host_id) AS 'Shared Instance Count', app.name AS 'Application Name with Environment', app.business_criticality AS 'Business Criticality' FROM application app LEFT JOIN application_host_mapping ahm ON app.id = ahm.application_id LEFT JOIN host h ON h.id = ahm.host_id LEFT JOIN application_host_mapping dahm ON ahm.host_id = dahm.host_id AND dahm.application_id != app.id LEFT JOIN application dap ON dap.id = dahm.application_id AND dap.id != app.id where  h.historic = 0 and h.status = 'Success' GROUP BY app.id ORDER BY CASE WHEN app_name LIKE '%-%city%' THEN REPLACE(app_name, '-', 'j') ELSE app_name END , environment;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Applications host and services counts","existing" : "no"}) ;
db.block.insert({
        "name"  : "Host Details With Service Count","queryType" : "query","reportType" : "table","query" : "SELECT host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', IFNULL(ip.data_center, 'Others') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, 'Others') AS 'Region', IFNULL(ip.environment, 'Others') AS 'Environment', host_outer.device_type AS 'Device Type', host_outer.instance_type AS 'Instance Type', host_outer.manufacturer AS Manufacturer, host_outer.product_name AS 'Product Name', host_outer.serial_number AS 'Serial No', host_outer.service_provider AS 'Service Provider', host_outer.bios_configuration AS 'BIOS Configuration', host_outer.instruction_set AS 'Instruction Set', host_outer.sku AS SKU, ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id), (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), app.name, ''), ',,', ',') AS 'Discovered Dependent Apps', aas.migration_strategy AS 'Migration Strategy', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(*) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', group_concat(app.name) as 'Tagged Applications' , cloud_providers.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN ip ON ip.host_id = host_outer.id LEFT JOIN cpu ON cpu.host_id = host_outer.id LEFT JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN service ON host_outer.id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cloud_providers.name WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(10, '%%') group by host_outer.id,cloud_providers.name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Host details for discovered hosts and Application Hosts and Services","existing" : "no"}) ;
db.block.insert({
        "name"  : "Service Details","queryType" : "query","reportType" : "table","query" : "SELECT host.ip AS IP, host.name AS Hostname, hserd.name 'Service Name', concat(hserd.name,' ',hserd.version) AS Version,hserd.status AS Status, hserd.type AS 'Server Type', hserd.port AS Port, hserd.cpu_percent AS 'CPU Percent', hserd.memory_percent AS 'Memory Percent', hserd.path AS 'Service Path', IF(hserd.core_service = 1, 'Core Service', 'System Service') AS 'Service Type' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN service hserd ON host.id = hserd.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "View All Service details","existing" : "no"}) ;
db.block.insert({
        "name"  : "SQL Aggregate Report","queryType" : "query","reportType" : "table","query" : "SELECT service.name AS 'Service', service.version AS 'Version', mssql_service.sid AS 'sid', host.name AS 'Host Name', host.ip AS 'IP Address', CONCAT(host.operating_system, ' ', host.version) AS 'Operating System', ip.environment AS 'Environment', host.instance_type AS 'Instance Type', host.manufacturer AS 'Make', host.product_name AS 'Model', host.instruction_set AS 'OS Architecture', cpu.model_name AS 'CPU Model', cpu.logical_processors AS 'vCPU', memory.total AS 'Total Memory', uts.average_memory_percent AS 'Memory Used(%)', storage.total AS 'Total Storage', uts.average_storage_percent AS 'Storage Used(%)', sas.eol_status AS 'EOL Status', sas.recommended_version AS 'Service Recommandation', service.status, service.reason, mssql_service.sid, mssql_service.sqlVersion, mssql_service.productLevel, mssql_service.serverEdition, mssql_service.version, mssql_service.clustered, mssql_service.clusterName, mssql_service.clusterRole, mssql_service.totalPageFileInMB, mssql_service.availablePageFileInMB, mssql_service.kernalPagedPoolInMB, mssql_service.kernalNonPagedPoolInMB, mssql_service.systemMemoryStateDescription, mssql_service.tables, mssql_service.views, mssql_service.procedures, mssql_service.triggers, mssql_service.functions, mssql_service.users, mssql_service.databases, mssql_service.ssis, mssql_service.ssrs, mssql_service.ssas, mssql_service.sqljobs, mssql_service.highAvailability, mssql_service.disasterRecovery, mssql_service.collation, mssql_service.serviceBroker, cloud_providers.name AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id LEFT JOIN mssql_service ON host.id = mssql_service.hostId AND mssql_service.historic = 0 JOIN ip ON ip.host_id = host.id JOIN cpu ON cpu.host_id = host.id JOIN utilization_summary uts ON uts.host_id = host.id JOIN memory ON memory.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total, AVG(used_percent) AS used_percentage FROM storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name WHERE service.type = 'Database' AND service.name = 'mssql' AND host.status = 'success' AND host.historic = 0 AND mssql_service.status = 'Completed';", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "SQL aggregate data from MSSql deep dive discovery","existing" : "no"}) ;
db.block.insert({
        "name"  : "Oracle Aggregate Report","queryType" : "query","reportType" : "table","query" : "SELECT oracle_service.dbName AS 'DB Name', oracle_service.sid AS 'SID', oracle_service.databasePort AS 'port', host.name AS 'Host Name', host.ip AS 'IP Address', CONCAT(host.operating_system, ' ', host.version) AS 'Operating System', ip.environment AS 'Environment', host.instance_type AS 'Instance Type', host.manufacturer AS 'Make', host.product_name AS 'Model', host.instruction_set AS 'OS Architecture', cpu.model_name AS 'CPU Model', cpu.logical_processors AS 'vCPU', memory.total AS 'Total Memory', uts.average_memory_percent AS 'Memory Used(%)', storage.total AS 'Total Storage', uts.average_storage_percent AS 'Storage Used(%)', ias.eol_status AS 'OS EOL Status', ias.os_recommendation AS 'OS Recommendation', service.name AS 'Service', service.version AS 'Version', oracle_service.instanceName AS 'DB Instance Name', sas.eol_status AS 'Service EOL Status', sas.recommendation AS 'Service Recommendation', oracle_service.edition, oracle_service.instanceRole, oracle_service.instanceModel, oracle_service.reason, oracle_service.isExaData, oracle_service.isATP, oracle_service.totalPhysicalMemoryInMB, oracle_service.availablePhysicalMemoryInMB, oracle_service.databasePort, oracle_service.localListener, oracle_service.tables, oracle_service.views, oracle_service.procedures, oracle_service.triggers, oracle_service.functions, oracle_service.users, oracle_service.varrays, oracle_service.fixedSizeInBytes, oracle_service.variableSizeInBytes, oracle_service.databaseBuffersInBytes, oracle_service.redoBuffersInBytes, oracle_service.parameterFileIOTotalWaits, oracle_service.diskFileOperationsIOTotalWaits, oracle_service.dbFileParallelReadTotalWaits, oracle_service.dbFileParallelWriteTotalWaits, oracle_service.logFileParallelWriteTotalWaits, oracle_service.dbSizeInGB, oracle_service.databaseVersion, oracle_service.nlsCharacterset, oracle_service.databaseBlockSize, oracle_service.racCluster, oracle_service.lOBs, oracle_service.externalTables, oracle_service.materializedView, oracle_service.directoryObjects, oracle_service.dbLink, oracle_service.sessionsMax, oracle_service.sessionsWarning, oracle_service.sessionsCurrent, oracle_service.sessionsHighWater, oracle_service.usersMax, oracle_service.cpuCountCurrent, oracle_service.cpuCoreCountCurrent, oracle_service.cpuSocketCountCurrent, oracle_service.cpuCountHighwater, oracle_service.cpuCoreCountHighwater, oracle_service.cpuSocketCountHighwater, cloud_providers.name AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id JOIN cloud_providers ON cloud_providers.enable = 'True' JOIN oracle_service ON host.id = oracle_service.hostId AND oracle_service.historic = 0 JOIN ip ON ip.host_id = host.id JOIN cpu ON cpu.host_id = host.id JOIN memory ON memory.host_id = host.id left join utilization_summary uts on uts.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total, AVG(used_percent) AS used_percentage FROM storage GROUP BY host_id) AS storage ON storage.host_id = host.id LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE service.type = 'Database' AND service.name = 'oracle' AND host.status = 'success' AND host.historic = 0 AND oracle_service.status = 'Completed';", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Oracle aggregate data from Oracle deep dive discovery","existing" : "no"}) ;
db.block.insert({
        "name"  : "Host Distinct OS Version","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT host.operating_system as 'Operating System ',host.version as 'OS Version' ,host.release_version as 'Release Version' from host  where historic = 0 and status ='success' order by  host.operating_system;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Unique Operating systems across discovered hosts","existing" : "no"}) ;
db.block.insert({
        "name"  : "Service distinct version","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT service.name, service.version FROM service JOIN host ON host.id = service.host_id WHERE host.historic = 0 AND host.status = 'success' AND service.name IS NOT NULL;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Unique Core and database services for hosts","existing" : "no"}) ;
db.block.insert({
        "name"  : "Utilization Summary","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname, host.ip AS 'IP Address', host.domain as' Domain Name', utilization.count AS 'Collected Utilizations Count', cpu.logical_processors AS 'Vcpu Count', utilization.min_CPU_Utilization_Percent AS 'Min CPU Utilization Percent', utilization.max_CPU_Utilization_Percent AS 'Max CPU Utilization Percent', round(uts.average_cpu_percent,2) AS 'Avg CPU Utilization Percent ', memory.total AS 'Total Memory', utilization.min_Memory_Utilization_Percent AS 'Min Memory Utilization Percent', utilization.max_Memory_Utilization_Percent AS 'Max Memory Utilization Percent', round(uts.average_memory_percent,2) AS 'Avg Memory Utilization Percent', storage.total AS 'Total Storage', utilization.min_Storage_Utilization_Percent AS 'Min Storage Utilization Percent', utilization.max_Storage_Utilization_Percent AS 'Max Storage Utilization Percent', round(uts.average_storage_percent,2) AS 'Avg Storage Utilization Percent', (select group_concat(distinct app.name) from application_review app left join application_host_mapping_review ahmr on app.id = ahmr.application_id where         ahmr.host_id = host.id) as 'Mapped Application Name(s)' FROM host JOIN  cpu ON cpu.host_id = host.id AND host.historic = 0 JOIN  memory ON memory.host_id = host.id JOIN (SELECT  host_id, SUM(total) AS total FROM   storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id JOIN (SELECT host_id, ROUND(MIN(memory_percent), 2) AS min_memory_utilization_percent, ROUND(MIN(cpu_percent), 2) AS min_cpu_utilization_percent, ROUND(MIN(storage_percent), 2) AS min_storage_utilization_percent, ROUND(MAX(memory_percent), 2) AS max_memory_utilization_percent, ROUND(MAX(cpu_percent), 2) AS max_cpu_utilization_percent, ROUND(MAX(storage_percent), 2) AS max_storage_utilization_percent, COUNT(*) AS count FROM  utilization  GROUP BY host_id) AS utilization ON host.id = utilization.host_id left join utilization_summary uts on uts.host_id =  host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "View the Utilization summary at host level","existing" : "no"}) ;
db.block.insert({
        "name"  : "OS EOSL Summary","queryType" : "query","reportType" : "table","query" : "SELECT host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS 'OS Version ', COUNT(host.name) AS 'Count', ias.eol_status AS 'EOL Status', ias.support_date AS 'OS Support End Date', ias.migration_strategy AS 'OS Migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', cloud_providers.name AS 'Cloud Provider' FROM host LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary AS ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 AND status = 'success' GROUP BY host.operating_system , host.version , cloud_providers.name ORDER BY cloud_providers.name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "OS EOL Summary post instance assessment ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Service EOSL Summary","queryType" : "query","reportType" : "table","query" : "SELECT service.type AS 'Service Type', IFNULL(CONCAT(service.name, ' ', IFNULL(service.version, '')), service.name) AS 'Service Name ', COUNT(service.name) AS Count, sas.eol_status AS 'EOL Status', sas.support_date AS 'Support Date ', sas.recommended_version AS 'Recommended Service', cloud_providers.name AS 'Cloud Provider' FROM host JOIN service ON host.id = service.host_id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN service_assessment_summary sas ON service.id = sas.service_id AND sas.cloud_provider = cloud_providers.name WHERE host.status = 'success' AND host.historic = 0 AND service.type IS NOT NULL GROUP BY service.name , service.version ,cloud_providers.name ORDER BY cloud_providers.name,service.name ASC;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Service EOSL Summary after service assessment","existing" : "no"}) ;
db.block.insert({
        "name"  : "Service Migration Strategy","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT s.name as 'Service Name' , s.type as 'Service Type', s.version as 'Service Version', h.ip as 'IP Address', h.name as 'Host Name', sas.eol_status as ' Service EOSL Status', sas.support_date as 'Service Support End Date', sas.recommended_version as 'Recommended Service' , cloud_providers.name as 'Cloud Provider' FROM  service s LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' JOIN host h ON s.host_id = h.id left join instance_assessment_summary ias on ias.host_id=  h.id left join service_assessment_summary sas on sas.service_id = s.id where h.status ='success' and  h.historic = 0 order by cloud_providers.name ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Service Migration Strategy information","existing" : "no"}) ;
db.block.insert({
        "name"  : "OS Migration Strategy","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT h.name as 'Host Name' , h.ip as 'IP Address', h.platform as 'Platfom' , h.operating_system as 'Operating System' , concat(h.operating_system,' ',h.version) as 'OS Version', ias.eol_status as 'OS EOL Status', ias.support_date as 'OS Support End Date' , ias.migration_strategy as 'OS Migration Strategy' , ias.migration_type as 'OS Migration Type' , ias.os_recommended_version as 'OS Recommendation Version', cloud_providers.name as 'Cloud Provider' FROM host h LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON h.id = ias.host_id  and ias.cloud_provider = cloud_providers.name where h.status ='success' and h.historic =0 order by cloud_providers.name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "OS Migration Strategy","existing" : "no"}) ;
db.block.insert({
        "name"  : "Hardware Summary","queryType" : "query","reportType" : "table","query" : "SELECT manufacturer AS 'Manufacturer', product_name as 'Product Name' , COUNT(*) AS Count FROM host WHERE status = 'success' AND historic = 0 AND manufacturer NOT IN ('' , ' ') GROUP BY manufacturer , product_name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "All hardware summary information","existing" : "no"}) ;
db.block.insert({
        "name"  : "Platform Overview","queryType" : "query","reportType" : "table","query" : "SELECT platform as 'Platform', count(*) as Count from host where status = 'success' and historic = 0 group by platform;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Platform Overview","existing" : "no"}) ;
db.block.insert({
        "name"  : "Physical vs Virtual Summary (Instance Type Overview)","queryType" : "query","reportType" : "table","query" : "SELECT instance_type as 'Instance Type', count(*) as Count from host where status = 'success' and historic = 0 group by instance_type;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Instance Type Overview","existing" : "no"}) ;
db.block.insert({
        "name"  : "Storage Report","queryType" : "query","reportType" : "table","query" : "SELECT host.ip as IP, host.name as Hostname, hstd.disk as Disk, hstd.file_system as FileSystem, hstd.total as Total, hstd.used as Used, hstd.available as Available, hstd.used_percent as 'Used Percent', hstd.mounted as Mounted, hstd.boot_partition as 'Boot Partition', hstd.logical_disk as LogicalDisk, hstd.volume_serial_number as 'Volume Serial Number', hstd.`compressed` as `Compressed` from task dtl join host host on dtl.id=host.task_id join storage hstd on hstd.host_id= host.id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Storage Details for the instances ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Network Report (Interfaces)","queryType" : "query","reportType" : "table","query" : "SELECT host.ip as IP, host.name as Hostname, hind.name as InterfaceName, hind.type as Type, hind.mac_address as MACAddress, hind.ip_address as IPAddress, hind.speed as Speed, hind.status as Status, hind.ip_subnet as 'IP Subnet', hind.dhcp_enabled as 'DHCP Enabled', hind.dns_server as 'DNS Server', hind.description as Description from task dtl join host host on dtl.id=host.task_id join interface hind on host.id= hind.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Network Details for the instances ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Software Report (Packages)","queryType" : "query","reportType" : "table","query" : "SELECT host.ip as IP, host.name as Hostname, replace(replace(hpkd.name, '//', '/'), '\\\\', '\\') AS 'Package Name', replace(replace(hpkd.version, '//', '/'), '\\\\', '\\') AS 'Package Version', replace(replace(hpkd.repository, '//', '/'), '\\\\', '\\') AS Repository from task dtl join host host on dtl.id=host.task_id join package hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Package Details for the instances ","existing" : "no"}) ;
db.block.insert({
        "name"  : "User Login Details","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT host.ip AS IP, host.name AS Hostname, DATE_FORMAT(lh.time, '%m-%d-%Y') AS Date, lh.user_name AS UserName, lh.server_ip AS 'Source ServerIP' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN login_history lh ON host.id = lh.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success';", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "User login details for the instances","existing" : "no"}) ;
db.block.insert({
        "name"  : "CronJobs - Windows","queryType" : "query","reportType" : "table","query" : "SELECT host.ip AS IP, host.name AS Hostname, scheduled.taskname as 'Task Name', scheduled.task_to_run as 'Task to Run', scheduled.author as 'Author', scheduled.run_as_user as 'Run as User', scheduled.scheduled_task_state as 'Scheduled Task State', scheduled.status as 'Status', scheduled.last_run_time as 'Last Run Time', scheduled.next_run_time as 'Next Run Time', scheduled.schedule_type as 'Schedule Type', scheduled.start_time as 'Start Time', scheduled.start_date as 'Start Date', scheduled.end_date as 'End Date' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled ON host.id = scheduled.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success'  and host.platform ='Windows' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Windows cron job details for the instances","existing" : "no"}) ;
db.block.insert({
        "name"  : "CronJobs - linux","queryType" : "query","reportType" : "table","query" : "SELECT host.ip AS IP, host.name AS Hostname,scheduled.command as 'Command', scheduled.minute as 'Minute', scheduled.hour as 'Hour', scheduled.day_of_the_month as 'Day of the Month', scheduled.month_of_the_year as 'Month of the Year', scheduled.day_of_the_week as 'Day of the Week' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled ON host.id = scheduled.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success'  and  host.platform ='Linux' ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "Linux cron job details for the instances","existing" : "no"}) ;
db.block.insert({
        "name"  : "Process Report","queryType" : "query","reportType" : "table","query" : "SELECT ps.local_service, pr.product,pr.product_version from(SELECT distinct local_service from port_summary) as ps left join(SELECT distinct name,product,product_version from raw_process ) pr on ps.local_service = pr.name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Discovery Summary","description" : "View the process details from port services data","existing" : "no"}) ;
db.block.insert({
        "name"  : "Instance Cloud Prices","queryType" : "query","reportType" : "table","query" : "SELECT h.name 'Host Name', h.ip 'IP Address', CONCAT(h.operating_system, ' ', h.version) 'OS Version', h.instance_type 'Instance Type', ip.region 'Region', ip.data_center 'Data Center', ip.environment 'Environment', group_concat( distinct app.name) 'Applications', FORMAT(icp.instance_vcpu, 0) 'Instance CPU', icp.instance_storage 'Instance Storage', icp.instance_memory 'Instance Memory', icp.instance_type 'Cloud Instance Type', icp.preferred_plan, icp.on_demand_price 'OnDemand Price', (icp.on_demand_price + actual_storage_price) 'OnDemand Total Price', icp.reserved_1_year_price 'Reserved 1 Yr Price', (icp.reserved_1_year_price + actual_storage_price) 'Reserved 1 Yr Total Cost', icp.reserved_3_year_price 'Reserved 3 Yr Price', (icp.reserved_3_year_price + actual_storage_price) 'Reserved 3 Yr Total Cost', icp.actual_storage_price 'Storage Cost', icp.recommended_instance_type 'Recommended Instance Type', icp.recommended_vcpu_count 'Recommended vCPU Count', icp.recommended_memory 'Recommended Memory', icp.recommended_storage 'Recommended Storage', icp.recommended_on_demand_price 'Recommended OnDemand Price', (icp.recommended_on_demand_price + recommended_storage_price) 'Recommended OnDemand Total Cost', icp.recommended_1_year_price 'Recommended 1 Yr Price', (icp.recommended_1_year_price + recommended_storage_price) 'Recommended 1 Yr Total Cost', icp.recommended_3_year_price 'Recommended 3 Yr Price', (icp.recommended_3_year_price + icp.recommended_storage_price) 'Recommended 3 Yr Total Cost', icp.recommended_storage_price 'Recommended Storage Price ', icp.recommended_preferred_plan, icp.customer_recommended_vcpu_count 'Cust Recommended vcpu Count ', icp.customer_recommended_memory 'Cust Recommended Memory ', icp.customer_recommended_storage 'Cust Recommended Storage ', icp.customer_recommended_instance_type 'Cust Recommended Instance Type ', icp.customer_recommended_on_demand_price 'Cust Recommended On Demand Price', (icp.customer_recommended_on_demand_price + customer_recommended_storage_price) 'Cust Recommended On Demand Price', icp.customer_recommended_1_year_price 'Cust Recommended 1 Yr Price ', (icp.customer_recommended_1_year_price + customer_recommended_storage_price) 'Cust Recommended 1 Yr Total Cost ', icp.customer_recommended_3_year_price 'Cust Recommended 3 Yr Cost ', (icp.customer_recommended_3_year_price + customer_recommended_storage_price) 'Cust Recommended 3 Yr Total Cost ', icp.customer_recommended_storage_price 'Cust Recommended Storage Price', icp.customer_recommended_preferred_plan 'Cust Recommended Preferred Plan', uts.average_cpu_percent 'CPU Usage(%)', uts.average_memory_percent 'Memory Usage(%)', uts.average_storage_percent 'Storage Usage(%)', ias.migration_type 'migration_type', tpt.region 'Cloud Region', tpt.storage_type 'Cloud Region', ias.migration_strategy 'OS Migration Strategy', ias.os_recommended_version 'OS Recommended Version', ias.eol_status 'OS EOSL Status', ias.server_type 'Server Type', cp.name 'Cloud Provider' FROM host h LEFT JOIN cloud_providers cp ON cp.enable = 'True' JOIN ip ON ip.host_id = h.id left join application_host_mapping ahm on ahm.host_id = h.id left join application app on app.id = ahm.application_id left join instance_cloud_prices icp ON icp.host_id = h.id  AND cp.name = icp.cloud_provider LEFT JOIN tco_page_template tpt ON tpt.id = icp.template_id  AND tpt.cloud_provider = cp.name LEFT JOIN utilization_summary uts ON uts.host_id = h.id LEFT JOIN instance_assessment_summary ias ON ias.host_id = h.id AND cp.name = ias.cloud_provider where h.status = 'success' AND h.historic = 0 GROUP BY h.ip;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "View the Instances Cloud Prices after assessment at cloud provider","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Host_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname, host.ip AS IP, host.domain as Domain, ifnull(ip.project, 'Others') as 'Project', ifnull(ip.data_center, 'Others') as 'Datacenter', ifnull(ip.region, 'Others') as 'Region', ifnull(ip.line_of_business, 'Others') as 'LOB', ifnull(ip.environment, 'Others') as 'Environment', group_concat(distinct IFNULL(application.name, '')) AS 'Application Names(Verified)', group_concat(distinct IFNULL(application_review.name, '')) AS 'Application Names(Groups)', host.platform AS Platform, host.operating_system AS 'Operating System', host.version AS 'OS Version', host.release_version AS 'Release Version', host.device_type AS 'Device Type', host.instance_type AS 'Instance Type', host.manufacturer AS Manufacturer, host.product_name AS 'Product Name', host.serial_number AS 'Serial No', host.service_provider AS 'Service Provider', host.bios_configuration AS 'BIOS Configuration', host.instruction_set AS 'Instruction Set', host.sku AS SKU, host.installed_on AS 'Installed On', memory.total AS `Memory(GB)`, cpu.logical_processors AS 'Logical Processors', host.timezone AS Timezone, host.uptime AS Uptime, host.pagefile_size AS 'Pagefile Size', host.internet_access AS 'Internet Access', host.rdc AS Rdc, host.gateway_ip AS 'Gateway IP', host.system_date AS 'System Date', host.domain AS Domain, host.power_status AS 'Power Status',host.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN ip on ip.host_id = host.id LEFT JOIN cpu ON cpu.host_id = host.id LEFT JOIN application_host_mapping ON application_host_mapping.host_id = host.id and application_host_mapping.active = 1 LEFT JOIN application ON application.id = application_host_mapping.application_id LEFT JOIN application_host_mapping_review ON application_host_mapping_review.host_id = host.id LEFT JOIN application_review ON application_review.id = application_host_mapping_review.application_id LEFT JOIN memory on memory.host_id = host.id where dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' group by host.id ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Host_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_CPU_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname, host.ip AS IP, host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as 'Operating System',host.version as Version, hcpud.model_name AS 'Model Name', hcpud.physical_processors AS 'Physical Processors', hcpud.physical_cores AS 'Physical Cores', hcpud.logical_processors AS 'Logical Processors', hcpud.utilization_percent AS 'Utilization Percent',hcpud.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN cpu hcpud ON host.id = hcpud.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report CPU_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Memory_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, hmd.total as 'Total Memory(GB)', (hmd.used+hmd.buffer_cache) as 'Used Memory(GB)(Includes Cache)', hmd.free as 'Free Memory(GB)', hmd.used_percent as 'Used Percent', hmd.type as Type ,hmd.db_updated_datetime as 'Discovered Time' from task dtl join host host on dtl.id=host.task_id join memory hmd on hmd.host_id= host.id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Memory_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Storage_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, hstd.disk as Disk, hstd.file_system as FileSystem, hstd.total as 'Total Storage(GB)', hstd.used as 'Used Storage(GB)', hstd.available as 'Available Storage(GB)', hstd.used_percent as 'Used Percent', hstd.mounted as Mounted, hstd.boot_partition as 'Boot Partition', hstd.logical_disk as LogicalDisk, hstd.volume_serial_number as 'Volume Serial Number', hstd.`compressed` as `Compressed`,hstd.db_updated_datetime as 'Discovered Time' from task dtl join host host on dtl.id=host.task_id join (SELECT * FROM storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) hstd on hstd.host_id= host.id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Storage_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Package_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, replace(replace(hpkd.name, '//', '/'), '\\\\', '\\') AS 'Package Name', replace(replace(hpkd.version, '//', '/'), '\\\\', '\\') AS 'Package Version', replace(replace(hpkd.repository, '//', '/'), '\\\\', '\\') AS Repository ,hpkd.db_updated_datetime as 'Discovered Time' from task dtl join host host on dtl.id=host.task_id join package hpkd on host.id= hpkd.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Package_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Interface_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, hind.name as InterfaceName, hind.type as Type, hind.mac_address as MACAddress, hind.ip_address as IPAddress, hind.speed as Speed, hind.status as Status, hind.ip_subnet as 'IP Subnet', hind.dhcp_enabled as 'DHCP Enabled', hind.dns_server as 'DNS Server', hind.description as Description,hind.db_updated_datetime as 'Discovered Time' from task dtl join host host on dtl.id=host.task_id join interface hind on host.id= hind.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Interface_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Ports_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname, host.ip AS 'Local Address', host.domain AS Domain, ip.data_center AS Datacenter, ip.environment AS Environment, host.platform AS Platform, host.operating_system AS 'Operating System', host.version AS Version, (SELECT GROUP_CONCAT(IFNULL(application.name, 'Others')) FROM application_host_mapping JOIN host ON host.id = application_host_mapping.host_id JOIN application ON application.id = application_host_mapping.application_id WHERE host.ip = ps.local_address AND host.historic = 0) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.used_interface AS UsedInterface, ps.protocol AS Protocol, network AS 'Network', ps.direction AS Direction, ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.foreign_address AS 'Foreign Address', foreign_host_name AS 'Foreign Host Name', undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(IFNULL(application.name, 'Others')) FROM application_host_mapping JOIN host ON host.id = application_host_mapping.host_id JOIN application ON application.id = application_host_mapping.application_id WHERE host.ip = ps.foreign_address AND host.historic = 0) AS 'Forwign Host Mapped Apps', ps.status AS Status, ps.db_updated_datetime AS 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN port_summary ps ON host.id = ps.host_id JOIN ip ON ip.host_id = host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success'; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Ports_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Application_Port_Consolidation","queryType" : "query","reportType" : "table","query" : "SELECT Application, `App Code`, `IP`, `Host Name`, `Platform`, `Operating System`, `Local Address` , `Local Service` , `Local Port`, `Direction`, `Foreign Address` , `Foreign Service`, `Foreign Port`, `Status` FROM (SELECT application.id AS application_id, application.name AS 'Application', application.app_code AS 'App Code', host.id AS host_id, host.ip AS 'IP', host.name AS 'Host Name', host.platform AS 'Platform', host.operating_system AS 'Operating System', port.local_address AS 'Local Address' , port.local_service AS 'Local Service' , port.number AS 'Local Port', port.direction AS Direction, port.foreign_address AS 'Foreign Address' , port.service AS 'Foreign Service', port.foreign_port AS 'Foreign Port', port.status AS Status, port.process_id AS 'Process_Id' FROM application JOIN application_host_mapping ON application.id = application_host_mapping.application_id JOIN host ON application_host_mapping.host_id = host.id JOIN port ON host.id = port.host_id WHERE application_host_mapping.active = 1 and port.direction = 'Outgoing' AND port.foreign_port NOT IN (3389 , 22, 5985, 5986, 443) AND port.service NOT IN ('explorer' , 'svchost', 'MpCmdRun', 'git-remote-ht', 'Idle', 'MsMpEng', 'System', 'sshd', 'ssh', 'Unknown')) subquery GROUP BY application_id , host_id , `Local Address` , `Foreign Address`, `Local Service` , `Foreign Service` , `Direction` ORDER BY application_id , host_id ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Application_Port_Consolidation","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Services_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, hserd.name 'Service Name', hserd.status AS Status, hserd.version AS Version, hserd.type AS 'Server Type', hserd.port AS Port, hserd.cpu_percent AS 'CPU Percent', hserd.memory_percent AS 'Memory Percent', hserd.path AS 'Service Path', IF(hserd.core_service = 1, 'Core Service', 'System Service') AS 'Service Type' ,hserd.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN service hserd ON host.id = hserd.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Services_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_UserGroup_Details","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, usrgrp.group_name as GroupName, usrgrp.username as UserName, usrgrp.user_type as UserType ,usrgrp.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN user_group usrgrp ON host.id = usrgrp.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report UserGroup_Details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Certificates","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, replace(replace(crt.path, '//', '/'), '\\\\', '\\') AS Path, crt.certificate_name AS 'Certificate Name', replace(replace(crt.issuer, '//', '/'), '\\\\', '\\') AS Issuer, crt.not_after AS Not_After, crt.not_before AS 'Not Before', crt.serial_number AS SerialNumber, crt.thumb_print AS 'Thumb Print', crt.dns_name_list AS 'DNS Name List', replace(replace(crt.subject, '//', '/'), '\\\\', '\\') AS Subject, crt.version AS Version, crt.ps_provider AS 'PS Provider', crt.certificatecol AS Certificatecol,crt.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN certificate crt ON host.id = crt.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Certificates","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Login_History","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, Date_Format(lh.time,'%m,%d,%Y') AS Time, lh.user_name AS UserName, lh.server_name AS ServerName, lh.server_ip AS ServerIP, lh.action AS Action,lh.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN login_history lh ON host.id = lh.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Login_History","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Utilization_Summary","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, utilization.count as 'Utilizations Count', cpu.logical_processors AS 'Vcpu Count', utilization.min_CPU_Utilization_Percent as 'MIN CPU Utilization Percent', utilization.max_CPU_Utilization_Percent as 'MAX CPU Utilization Percent', utilization.CPU_Utilization_Percent as 'AVG CPU Utilization Percent ', memory.total AS 'Total Memory' , utilization.min_Memory_Utilization_Percent as 'MIN Memory Utilization Percent', utilization.max_Memory_Utilization_Percent as 'MAX Memory Utilization Percent', utilization.Memory_Utilization_Percent as 'AVG Memory Utilization Percent', storage.total AS 'Total Storage', utilization.min_Storage_Utilization_Percent as 'MIN Storage Utilization Percent', utilization.max_Storage_Utilization_Percent as 'MAX Storage Utilization Percent', utilization.Storage_Utilization_Percent as 'AVG Storage Utilization Percent' FROM host JOIN cpu ON cpu.host_id = host.id AND host.historic = 0 JOIN memory ON memory.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total FROM storage where ifnull(type,'') NOT LIKE '%cifs%' AND ifnull(type,'') NOT LIKE '%nfs%' AND ifnull(type,'') NOT LIKE '%secfs2%' AND ifnull(type,'') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id JOIN (SELECT host_id, ROUND(AVG(memory_percent), 2) AS memory_utilization_percent, ROUND(AVG(cpu_percent), 2) AS cpu_utilization_percent, ROUND(AVG(storage_percent), 2) AS storage_utilization_percent, ROUND(MIN(memory_percent), 2) AS min_memory_utilization_percent, ROUND(MIN(cpu_percent), 2) AS min_cpu_utilization_percent, ROUND(MIN(storage_percent), 2) AS min_storage_utilization_percent, ROUND(MAX(memory_percent), 2) AS max_memory_utilization_percent, ROUND(MAX(cpu_percent), 2) AS max_cpu_utilization_percent, ROUND(MAX(storage_percent), 2) AS max_storage_utilization_percent, count(*) as count FROM utilization GROUP BY host_id) AS utilization ON host.id = utilization.host_id join ip on ip.host_id=host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Utilization_Summary","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Utilizations","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, host.release_version as ReleaseVersion, host.ip, host.name, `utilization`.`executiontime` AS Executiontime , `utilization`.`memory_percent` AS 'Memory Percent', `utilization`.`cpu_percent` AS 'Cpu Percent', `utilization`.`storage_percent` AS 'Storage Percent' FROM host JOIN `utilization` ON utilization.host_id = host.id join ip on ip.host_id=host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Utilizations","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Dependency","queryType" : "query","reportType" : "table","query" : "SELECT app.name AS 'Application Name', host_outer.ip AS 'Host IP', host_outer.name AS 'Host Name', host_outer.platform AS Platform, IF(host_outer.platform = 'Windows', CONCAT(host_outer.operating_system, ' ', host_outer.version), CONCAT(host_outer.operating_system, ' ', host_outer.release_version)) AS 'Operating System Version', COALESCE(service.name, ' ', service.version) AS 'ServiceName', service.type as 'Service Type', (SELECT GROUP_CONCAT(app1.name) FROM application_host_mapping apm1 LEFT JOIN application app1 ON app1.id = apm1.application_id and app1.id != app.id LEFT JOIN host host_inner ON host_inner.id = apm1.host_id WHERE host_inner.id = host_outer.id) AS 'Dependent Applications' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN service ON ahm.host_id = service.host_id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host_outer.id LIKE IFNULL(NULL, '%%') ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Dependency","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Cron_Jobs_Windows","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, scheduled.taskname as 'Task Name', scheduled.task_to_run as 'Task to Run', scheduled.author as 'Author', scheduled.run_as_user as 'Run as User', scheduled.scheduled_task_state as 'Scheduled Task State', scheduled.status as 'Status', scheduled.last_run_time as 'Last Run Time', scheduled.next_run_time as 'Next Run Time', scheduled.schedule_type as 'Schedule Type', scheduled.start_time as 'Start Time', scheduled.start_date as 'Start Date', scheduled.end_date as 'End Date' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled ON host.id = scheduled.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' and host.platform ='Windows' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Cron_Jobs_Windows","existing" : "no"}) ;
db.block.insert({
        "name"  : "Inventory_Cron_Jobs_Linux","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version,scheduled.command as 'Command', scheduled.minute as 'Minute', scheduled.hour as 'Hour', scheduled.day_of_the_month as 'Day of the Month', scheduled.month_of_the_year as 'Month of the Year', scheduled.day_of_the_week as 'Day of the Week' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled ON host.id = scheduled.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' and host.platform ='Linux' ; ", "account" : "account" ,"plugin" : "MySQL","blockType" : "Inventory Report","description" : "Inventory Report Cron_Jobs_Linux","existing" : "no"}) ;

db.account.find({plugin:"MySQL",schema:"discovery"}).forEach(
    function(x) {
        db.block.update(
            {plugin:"MySQL"},
            { $set: { account: x._id.valueOf(), "createdAt": new Date()} },
            { "multi" : true }
        );
    }
);

// Date : 19-Jul-2022 MHD-5143 Referring all blocks to application and application_host_mapping main tables instead review tables.

db.report.deleteMany({name:"Assessment Summary"});
db.report.deleteMany({name:"DB Aggregate Reports"});
db.report.deleteMany({name:"Inventory Report"});
db.report.insert(
{
        "name" : "Assessment Summary",
        "description" : "",     "createdAt" : new Date(),"createdBy" : "matildaadmin@matildacloud.com","reportType" : "Detailed Report",
        "layout" : [
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231900", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Application Assessment Summary",     "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231901", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Application Summary Details",                "description" : "",  "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231902", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Application Interfacing Details",    "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231903", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Application TCO Right Sizing",               "description" : "",  "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231904", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Instance Assessment Summary",                "description" : "",  "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231905", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Instance TCO Right Sizing",                  "description" : "",  "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231906", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Host Details",                                               "description" : "",   "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231907", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "App Host,Service counts",                    "description" : "",  "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231908", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Host Details With Service Count",    "description" : "",     "blockId" : "" }}

        ],
        "status" : "Not-Initiated",
        "_class" : "com.matildacloud.dashboard.models.Report"
}
);

db.block.find({"name":{$in: ["Application Assessment Summary", "Application Summary Details", "Application Interfacing Details", "Application TCO Right Sizing", "Instance Assessment Summary", "Instance TCO Right Sizing", "Host Details", "App Host,Service counts", "Host Details With Service Count"]}}).forEach(
function(x)
{
        db.report.updateMany(
        {name:"Assessment Summary","layout.component.title":x.name},
        { $set:{'layout.$.component.blockId': x._id.valueOf()}}
        )
}
);


db.report.insert(
{
        "name" : "DB Aggregate Reports",
        "description" : "",     "createdAt" : new Date(),"createdBy" : "matildaadmin@matildacloud.com","reportType" : "Detailed Report",
        "layout" : [
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231800", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "SQL Aggregate Report",           "description" : "", "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231801", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Oracle Aggregate Report",    "description" : "",     "blockId" : "" }}
                        ],
        "status" : "Not-Initiated",
        "_class" : "com.matildacloud.dashboard.models.Report"
}
);


db.block.find({"name":{$in: ["SQL Aggregate Report", "Oracle Aggregate Report"]}}).forEach(
function(x)
{
        db.report.updateMany(
        {name:"DB Aggregate Reports","layout.component.title":x.name},
        { $set:{'layout.$.component.blockId': x._id.valueOf()}}
        )
}
);

db.report.insert(
{
        "name" : "Inventory Report",
        "description" : "",     "createdAt" : new Date(),"createdBy" : "matildaadmin@matildacloud.com","reportType" : "Detailed Report",
        "layout" : [
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231600", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Host_Details", "description" : "", "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231601", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_CPU_Details",      "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231602", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Memory_Details",   "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231603", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Storage_Details",  "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231604", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Package_Details",  "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231605", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Interface_Details",        "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231606", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Ports_Details",    "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231607", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Application_Port_Consolidation",   "description" : "",  "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231608", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Services_Details", "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231610", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_UserGroup_Details",    "description" : "", "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231611", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Certificates",     "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231612", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Login_History",    "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231613", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Utilization_Summary",      "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231614", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Utilizations",     "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231615", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Dependency",       "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231616", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Cron_Jobs_Windows",        "description" : "",     "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8f-7eb8-09fc2e231617", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "Inventory_Cron_Jobs_Linux",  "description" : "",     "blockId" : "" }}
        ],
        "status" : "Not-Initiated",
        "_class" : "com.matildacloud.dashboard.models.Report"
}
);


db.block.find({"name":{$in: ["Inventory_Host_Details","Inventory_CPU_Details","Inventory_Memory_Details","Inventory_Storage_Details","Inventory_Package_Details","Inventory_Interface_Details","Inventory_Ports_Details","Inventory_Application_Port_Consolidation","Inventory_Services_Details","Inventory_UserGroup_Details","Inventory_Certificates","Inventory_Login_History","Inventory_Utilization_Summary","Inventory_Utilizations","Inventory_Dependency","Inventory_Cron_Jobs_Windows","Inventory_Cron_Jobs_Linux",]}}).forEach(
function(x)
{
        db.report.updateMany(
        {name:"Inventory Report","layout.component.title":x.name},
        { $set:{'layout.$.component.blockId': x._id.valueOf()}}
        )
}
);


db.block.update(
        {plugin:"MySQL" , name:"Application Interfacing Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host.name AS 'Host Name', host.ip AS 'Local IP Address', (SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm1 JOIN host host1 ON host1.id = ahm1.host_id JOIN application app1 ON app1.id = ahm1.application_id WHERE host1.id = ps.host_id) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.foreign_address AS 'Foreign IP Address', ps.foreign_host_name AS 'Foreign Host Name', ps.undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm2 JOIN application app2 ON app2.id = ahm2.application_id JOIN host host2 ON host2.id = ahm2.host_id WHERE host2.ip = (SELECT ip AS ip_address FROM public_private_ip_lookup pip WHERE pip.private_ip = ps.foreign_address LIMIT 1) AND host2.historic = 0) AS 'Foreign Host Mapped Apps', network AS 'Network', ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.direction AS Direction, ps.used_interface AS UsedInterface, ps.status AS Status, ps.protocol AS Protocol, app.name AS 'Application Name With Environment' FROM port_summary ps JOIN host host ON ps.host_id = host.id JOIN application_host_mapping ahm1 ON host.id = ahm1.host_id JOIN application app ON app.id = ahm1.application_id AND host.id = ahm1.host_id AND host.historic = 0 AND host.status = 'success' AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'ip' AND active = 1 AND VALUE = ps.local_address) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'port' AND active = 1 AND VALUE = ps.local_port_number) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'service' AND active = 1 AND VALUE = ps.local_service) AND ahm1.application_id LIKE IFNULL(NULL, '%%');"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Application TCO Right Sizing"},
        { $set: { query: "SELECT LEFT(app.name,LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', GROUP_CONCAT(tcp.`Host Name`) AS 'Host Names', COUNT(tcp.`IP Address`) AS 'Host Count', SUM(tcp.`vCPU Count`) AS 'Logical Processors', SUM(tcp.`Storage(GB)`) AS 'Total Storage', tcp.`FS Types` AS 'FS Types', SUM(tcp.`Memory(GB)`) AS 'Total Memory', ROUND(tcp.`Avg CPU Usage(%)`, 2) AS 'CPU Usage%', sum(tcp.`IAAS On Demand Price($)`) AS `IAAS OnDemand Price`, sum(tcp.`IAAS Reserved 1 year Price($)`) AS `IAAS Reserved 1 year Price`, sum(tcp.`IAAS Reserved 3 year Price($)`) AS `IAAS Reserved 3 year Price`, sum(tcp.`PAAS On Demand Price($)`) AS `PAAS OnDemand Price`, sum(tcp.`PAAS Reserved 1 year Price($)`) AS `PAAS Reserved 1 year Price`, sum(tcp.`PAAS Reserved 3 year Price($)`) AS `PASS Reserved 3 year Price`, sum(tcp.`Yearly Storage Price($)`) AS `Storage Price Yearly`, sum(tcp.`IAAS Recommended On Demand Price($)`) AS `IAAS Recommended On Demand Price`, sum(tcp.`IAAS Recommended 1 year Price($)`) AS `IAAS Recommended 1 year Price`, sum(tcp.`IAAS Recommended 3 year Price($)`) AS `IAAS Recommended 3 year Price`, sum(tcp.`PAAS Recommended On Demand Price($)`) AS `PAAS Recommended On Demand Price`, sum(tcp.`PAAS Recommended 1 year Price($)`) AS `PAAS Recommended 1 year Price`, sum(tcp.`PAAS Recommended 3 year Price($)`) AS `PASS Recommended 3 year Price`, sum(tcp.`Recommended Storage Price`) AS `Recommended Storage Price Yearly`, app.name AS 'Application With Environment', tcp.`cloud Provider` AS 'Cloud Provider' FROM  tco_prices_consolidated tcp join cloud_providers on cloud_providers.enable = 'True' and  cloud_providers.name = tcp.`cloud Provider` JOIN application_host_mapping ahm ON ahm.host_id = tcp.host_id JOIN application app ON app.id = ahm.application_id group by tcp.`cloud Provider`, app.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Host Details"},
        { $set: { query: "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS Domain, host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS Version, IFNULL(ip.data_center, ' ') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, ' ') AS 'Region', IFNULL(ip.environment, ' ') AS 'Environment', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', GROUP_CONCAT(DISTINCT IFNULL(application.name, ' ')) AS 'Application Name', host.device_type AS 'Device Type', host.instance_type AS 'Instance Type', host.manufacturer AS Manufacturer, host.product_name AS 'Product Name', host.serial_number AS 'Serial No', host.service_provider AS 'Service Provider', host.bios_configuration AS 'BIOS Configuration', host.instruction_set AS 'Instruction Set', host.sku AS SKU, host.installed_on AS 'Installed On', host.`memory` AS `Memory`, cpu.logical_processors AS 'Logical Processors', host.timezone AS Timezone, host.uptime AS Uptime, host.pagefile_size AS 'Pagefile Size', host.internet_access AS 'Internet Access', host.rdc AS Rdc, host.gateway_ip AS 'Gateway IP', host.system_date AS 'System Date', host.power_status AS 'Power Status' FROM host JOIN ip ON ip.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN cpu ON cpu.host_id = host.id LEFT JOIN application_host_mapping ON application_host_mapping.host_id = host.id AND application_host_mapping.active = 1 LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND cloud_providers.name = ias.cloud_provider LEFT JOIN application ON application.id = application_host_mapping.application_id WHERE host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' GROUP BY host.id;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Utilization Summary"},
        { $set: { query: "SELECT host.name AS Hostname, host.ip AS 'IP Address', host.domain as 'Domain Name', utilization.count AS 'Collected Utilizations Count', cpu.logical_processors AS 'Vcpu Count', utilization.min_CPU_Utilization_Percent AS 'Min CPU Utilization Percent', utilization.max_CPU_Utilization_Percent AS 'Max CPU Utilization Percent', round(uts.average_cpu_percent,2) AS 'Avg CPU Utilization Percent ', memory.total AS 'Total Memory', utilization.min_Memory_Utilization_Percent AS 'Min Memory Utilization Percent', utilization.max_Memory_Utilization_Percent AS 'Max Memory Utilization Percent', round(uts.average_memory_percent,2) AS 'Avg Memory Utilization Percent', storage.total AS 'Total Storage', utilization.min_Storage_Utilization_Percent AS 'Min Storage Utilization Percent', utilization.max_Storage_Utilization_Percent AS 'Max Storage Utilization Percent', round(uts.average_storage_percent,2) AS 'Avg Storage Utilization Percent', (select group_concat(distinct app.name) from application_review app left join application_host_mapping_review ahmr on app.id = ahmr.application_id where         ahmr.host_id = host.id) as 'Mapped Application Name(s)' FROM host JOIN  cpu ON cpu.host_id = host.id AND host.historic = 0 JOIN  memory ON memory.host_id = host.id JOIN (SELECT  host_id, SUM(total) AS total FROM   storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id JOIN (SELECT host_id, ROUND(MIN(memory_percent), 2) AS min_memory_utilization_percent, ROUND(MIN(cpu_percent), 2) AS min_cpu_utilization_percent, ROUND(MIN(storage_percent), 2) AS min_storage_utilization_percent, ROUND(MAX(memory_percent), 2) AS max_memory_utilization_percent, ROUND(MAX(cpu_percent), 2) AS max_cpu_utilization_percent, ROUND(MAX(storage_percent), 2) AS max_storage_utilization_percent, COUNT(*) AS count FROM  utilization  GROUP BY host_id) AS utilization ON host.id = utilization.host_id left join utilization_summary uts on uts.host_id =  host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' ;"} }
);


db.block.update(
        {plugin:"MySQL" , name:"Inventory_Host_Details"},
        { $set: { query: "SELECT host.name AS Hostname, host.ip AS 'IP Address' , host.domain as 'Domain Name', ifnull(ip.project, 'Others') as 'Project', ifnull(ip.data_center, 'Others') as 'Datacenter', ifnull(ip.region, 'Others') as 'Region', ifnull(ip.line_of_business, 'Others') as 'LOB', ifnull(ip.environment, 'Others') as 'Environment', group_concat(distinct IFNULL(application.name, '')) AS 'Application Names(Verified)', group_concat(distinct IFNULL(application_review.name, '')) AS 'Application Names(Groups)', host.platform AS Platform, host.operating_system AS 'Operating System', host.version AS 'OS Version', host.release_version AS 'Release Version', host.device_type AS 'Device Type', host.instance_type AS 'Instance Type', host.manufacturer AS Manufacturer, host.product_name AS 'Product Name', host.serial_number AS 'Serial No', host.service_provider AS 'Service Provider', host.bios_configuration AS 'BIOS Configuration', host.instruction_set AS 'Instruction Set', host.sku AS SKU, host.installed_on AS 'Installed On', memory.total AS `Memory(GB)`, cpu.logical_processors AS 'Logical Processors', host.timezone AS Timezone, host.uptime AS Uptime, host.pagefile_size AS 'Pagefile Size', host.internet_access AS 'Internet Access', host.rdc AS Rdc, host.gateway_ip AS 'Gateway IP', host.system_date AS 'System Date', host.domain AS Domain, host.power_status AS 'Power Status',host.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN ip on ip.host_id = host.id LEFT JOIN cpu ON cpu.host_id = host.id LEFT JOIN application_host_mapping ON application_host_mapping.host_id = host.id and application_host_mapping.active = 1 LEFT JOIN application ON application.id = application_host_mapping.application_id LEFT JOIN application_host_mapping_review ON application_host_mapping_review.host_id = host.id LEFT JOIN application_review ON application_review.id = application_host_mapping_review.application_id LEFT JOIN memory on memory.host_id = host.id where dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' group by host.id ;"} }
);

// Date : 20-Jul-2022 MHD-5161 OS EOSL block Update
db.block.update(
        {plugin:"MySQL" , name:"OS EOSL Summary"},
        { $set: { query: "SELECT host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS 'OS Version ', COUNT(host.name) AS 'Count', ias.eol_status AS 'EOL Status', ias.support_date AS 'OS Support End Date', ias.migration_strategy AS 'OS Migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', cloud_providers.name AS 'Cloud Provider' FROM host LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary AS ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 AND host.status = 'success' GROUP BY host.operating_system , host.version , cloud_providers.name ORDER BY cloud_providers.name;"} }
);


// Date : 26-Jul-2022 MHD-5251 App Host Service Count Block Update
db.block.update(
        {plugin:"MySQL" , name:"App Host,Service counts"},
        { $set: { query: "SELECT DISTINCT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'app_name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', COUNT(DISTINCT ahm.host_id) AS 'Instance Count ', (SELECT COUNT(*) FROM service JOIN host ON host.id = service.host_id join application_host_mapping ahm_inner on ahm_inner.application_id = app.id and host.id = ahm_inner.host_id WHERE host.status ='success' and host.historic = 0) AS 'Service Count', COUNT(DISTINCT dap.id) AS 'Shared Application Count', COUNT(DISTINCT dahm.host_id) AS 'Shared Instance Count', app.name AS 'Application Name with Environment', app.business_criticality AS 'Business Criticality' FROM application app LEFT JOIN application_host_mapping ahm ON app.id = ahm.application_id LEFT JOIN host h ON h.id = ahm.host_id LEFT JOIN application_host_mapping dahm ON ahm.host_id = dahm.host_id AND dahm.application_id != app.id LEFT JOIN application dap ON dap.id = dahm.application_id AND dap.id != app.id WHERE h.historic = 0 AND h.status = 'Success' GROUP BY app.id ORDER BY CASE WHEN app_name LIKE '%-%city%' THEN REPLACE(app_name, '-', 'j') ELSE app_name END , environment;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Service Details"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname, hserd.name 'Service Name', hserd.version AS Version,hserd.status AS Status, hserd.type AS 'Server Type', hserd.port AS Port, hserd.cpu_percent AS 'CPU Percent', hserd.memory_percent AS 'Memory Percent', hserd.path AS 'Service Path', IF(hserd.core_service = 1, 'Core Service', 'System Service') AS 'Service Type' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN service hserd ON host.id = hserd.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ;"} }
);
// Date : 27-Jul-2022 MHD-5270  Packages /software block Query update
db.block.update(
        {plugin:"MySQL" , name:"Software Report (Packages)"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hpkd.name  AS 'Package Name', hpkd.version AS 'Package Version',hpkd.repository  AS Repository from task dtl join host host on dtl.id=host.task_id join package hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Package_Details"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hpkd.name  AS 'Package Name', hpkd.version AS 'Package Version',hpkd.repository  AS Repository from task dtl join host host on dtl.id=host.task_id join package hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);
// Date : 27-Jul-2022 MHD-5261 DISTINCT OS versiob block update
db.block.update(
        {plugin:"MySQL" , name:"Host Distinct OS Version"},
        { $set: { query: "SELECT DISTINCT host.operating_system as 'Operating System ',host.version as 'OS Version' ,host.release_version as 'Release Version' from host  where historic = 0 and status ='success' order by  host.operating_system;"} }
);
// Date : 27-Jul-2022 MHD-5288 show details only for enabled cloud providers
db.block.update(
        {plugin:"MySQL" , name:"Instance Assessment Summary"},
        { $set: { query: "SELECT DISTINCT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(operating_system, ' ', version) AS 'OS Version', ias.server_type AS 'Server Type', (SELECT GROUP_CONCAT(app.name) FROM application app JOIN application_host_mapping ahm ON app.id = ahm.application_id WHERE ahm.host_id = host.id) AS 'Applications', ias.cpu_utilization AS 'CPU Utilization', ias.memory_utilization AS 'Memory Utilization', ias.storage_utilization AS 'Storage Utilization', ias.instance_activity AS 'Instance Activity', ias.migration_priority AS 'Migration Priority', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommended_version AS 'OS Recommended Version', ias.migration_strategy AS 'Migration Strategy', ias.migration_type AS 'Migration Type', ias.cloud_provider AS 'Cloud Provider' FROM host LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id and ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 and host.status ='success';"} }
);


// Date : 02-Aug-2022 MHD-5361 correcting service type blocks
db.block.update(
        {plugin:"MySQL" , name:"Service Details"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname, hserd.name 'Service Name', concat(hserd.name,' ',hserd.version) AS Version,hserd.status AS Status, hserd.type AS 'Service Type', hserd.port AS Port, hserd.cpu_percent AS 'CPU Percent', hserd.memory_percent AS 'Memory Percent', hserd.path AS 'Service Path'  FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN service hserd ON host.id = hserd.host_id WHERE dtl.account_id LIKE IFNULL(10, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Services_Details"},
        { $set: { query: "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, hserd.name 'Service Name', hserd.status AS Status, hserd.version AS Version, hserd.type AS 'Service Type', hserd.port AS Port, hserd.cpu_percent AS 'CPU Percent', hserd.memory_percent AS 'Memory Percent', hserd.path AS 'Service Path',hserd.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN service hserd ON host.id = hserd.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ;"} }
);

// Date : 15-Aug-2022 MHD-5418 removing the OS recommendation and OS version columns from Assessment Summary Details block
db.block.update(
        {plugin:"MySQL" , name:"Application Summary Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.server_type AS 'Server Type', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', mssql_oracle.serverEdition AS 'DBServer Edition', mssql_oracle.sid AS 'SIDs', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id), (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), app.name, ''), ',,', ',') AS 'Discovered Dependent Apps', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(DISTINCT application_id) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', app.name AS 'Application With Environment', cp.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN service ON ahm.host_id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cp.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cp.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cp.name LEFT JOIN (SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct ms.serverEdition) AS serverEdition, 'MSSQL' FROM  host h JOIN service ON service.host_id = h.id    AND service.type = 'Database'   AND service.name = 'mssql' JOIN mssql_service ms ON ms.hostid = h.id WHERE   h.historic = 0 AND ms.status = 'Completed'   group by host_id,service.id UNION ALL SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct IF(IFNULL(ms.edition, '') = 'EE', 'Enterprise Edition', ms.edition)) AS serverEdition, 'Oracle' FROM host h JOIN service ON service.host_id = h.id AND service.type = 'Database' AND service.name = 'oracle' JOIN oracle_service ms ON ms.hostid = h.id WHERE h.historic = 0 AND ms.status = 'Completed'  group by h.id,service.id  ) AS mssql_oracle ON mssql_oracle.host_id = ahm.host_id AND mssql_oracle.service_id = service.id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(10, '%%') AND app.id LIKE IFNULL(NULL, '%%') AND host_outer.id IN (SELECT ahm1.host_id FROM application_host_mapping ahm1 WHERE ahm1.application_id LIKE IFNULL(NULL, '%%')) ORDER BY cp.name;"} }
);


// Date : 19-Aug-2022 MHD-5250 Updating the block o get the memory from memory table instead host table
db.block.update(
        {plugin:"MySQL" , name:"Host Details"},
        { $set: { query: "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS Domain, host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS Version, IFNULL(ip.data_center, ' ') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, ' ') AS 'Region', IFNULL(ip.environment, ' ') AS 'Environment', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', GROUP_CONCAT(DISTINCT IFNULL(application_review.name, ' ')) AS 'Application Name', host.device_type AS 'Device Type', host.instance_type AS 'Instance Type', host.manufacturer AS Manufacturer, host.product_name AS 'Product Name', host.serial_number AS 'Serial No', host.service_provider AS 'Service Provider', host.bios_configuration AS 'BIOS Configuration', host.instruction_set AS 'Instruction Set', host.sku AS SKU, host.installed_on AS 'Installed On', memory.`total` AS `Memory`, cpu.logical_processors AS 'Logical Processors', host.timezone AS Timezone, host.uptime AS Uptime, host.pagefile_size AS 'Pagefile Size', host.internet_access AS 'Internet Access', host.rdc AS Rdc, host.gateway_ip AS 'Gateway IP', host.system_date AS 'System Date', host.power_status AS 'Power Status' FROM host JOIN ip ON ip.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN  cpu ON cpu.host_id = host.id LEFT JOIN  memory ON memory.host_id = host.id LEFT JOIN  application_host_mapping_review ON application_host_mapping_review.host_id = host.id AND application_host_mapping_review.active = 1 LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND cloud_providers.name = ias.cloud_provider LEFT JOIN application_review ON application_review.id = application_host_mapping_review.application_id WHERE host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' GROUP BY host.id;"} }
);


// Date : 13-Sep-2022 MHD-5259 - Aggregate Report-Blocks updates
db.block.update(
   {plugin:"MySQL" , name:"SQL Aggregate Report"},
   { $set: { query: "SELECT service.name AS 'Service', mssql_service.instanceName as 'DB Name', mssql_service.sid AS 'sid', service.version AS 'Version', host.name AS 'Host Name', host.ip AS 'IP Address', CONCAT(host.operating_system, ' ', host.version) AS 'Operating System', ip.environment AS 'Environment', host.instance_type AS 'Instance Type', host.manufacturer AS 'Make', host.product_name AS 'Model', host.instruction_set AS 'OS Architecture', cpu.model_name AS 'CPU Model', cpu.logical_processors AS 'vCPU', memory.total AS 'Total Memory', uts.average_memory_percent AS 'Memory Used(%)', storage.total AS 'Total Storage', uts.average_storage_percent AS 'Storage Used(%)', sas.eol_status AS 'EOL Status', sas.recommended_version AS 'Service Recommandation', service.status, service.reason, mssql_service.productLevel, mssql_service.serverEdition, mssql_service.clustered, mssql_service.clusterName, mssql_service.clusterRole, mssql_service.totalPageFileInMB, mssql_service.availablePageFileInMB, mssql_service.kernalPagedPoolInMB, mssql_service.kernalNonPagedPoolInMB, mssql_service.systemMemoryStateDescription, mssql_service.tables, mssql_service.views, mssql_service.procedures, mssql_service.triggers, mssql_service.functions, mssql_service.users, mssql_service.databases, mssql_service.ssis, mssql_service.ssrs, mssql_service.ssas, mssql_service.sqljobs, mssql_service.highAvailability, mssql_service.disasterRecovery, mssql_service.collation, mssql_service.serviceBroker, cloud_providers.name AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id LEFT JOIN mssql_service ON host.id = mssql_service.hostId AND mssql_service.historic = 0 JOIN ip ON ip.host_id = host.id JOIN cpu ON cpu.host_id = host.id JOIN utilization_summary uts ON uts.host_id = host.id JOIN memory ON memory.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total, AVG(used_percent) AS used_percentage FROM storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name WHERE service.type = 'Database' AND service.name = 'mssql' AND host.status = 'success' AND host.historic = 0 AND mssql_service.status = 'Completed';"} }
);

db.block.update(
   {plugin:"MySQL" , name:"Oracle Aggregate Report"},
   { $set: { query: "SELECT service.name as 'DB Service', oracle_service.dbName AS 'DB Name', oracle_service.sid AS 'SID', service.version AS 'Version', oracle_service.databasePort AS 'port', host.name AS 'Host Name', host.ip AS 'IP Address', CONCAT(host.operating_system, ' ', host.version) AS 'Operating System', ip.environment AS 'Environment', host.instance_type AS 'Instance Type', host.manufacturer AS 'Make', host.product_name AS 'Model', host.instruction_set AS 'OS Architecture', cpu.model_name AS 'CPU Model', cpu.logical_processors AS 'vCPU', memory.total AS 'Total Memory', uts.average_memory_percent AS 'Memory Used(%)', storage.total AS 'Total Storage', uts.average_storage_percent AS 'Storage Used(%)', ias.eol_status AS 'OS EOL Status', ias.os_recommendation AS 'OS Recommendation', sas.eol_status AS 'Service EOL Status', sas.recommendation AS 'Service Recommendation', oracle_service.edition, oracle_service.instanceRole, oracle_service.instanceModel, oracle_service.reason, oracle_service.isExaData, oracle_service.isATP, oracle_service.totalPhysicalMemoryInMB, oracle_service.availablePhysicalMemoryInMB, oracle_service.localListener, oracle_service.tables, oracle_service.views, oracle_service.procedures, oracle_service.triggers, oracle_service.functions, oracle_service.users, oracle_service.varrays, oracle_service.fixedSizeInBytes, oracle_service.variableSizeInBytes, oracle_service.databaseBuffersInBytes, oracle_service.redoBuffersInBytes, oracle_service.parameterFileIOTotalWaits, oracle_service.diskFileOperationsIOTotalWaits, oracle_service.dbFileParallelReadTotalWaits, oracle_service.dbFileParallelWriteTotalWaits, oracle_service.logFileParallelWriteTotalWaits, oracle_service.dbSizeInGB, oracle_service.databaseVersion, oracle_service.nlsCharacterset, oracle_service.databaseBlockSize, oracle_service.racCluster, oracle_service.lOBs, oracle_service.externalTables, oracle_service.materializedView, oracle_service.directoryObjects, oracle_service.dbLink, oracle_service.sessionsMax, oracle_service.sessionsWarning, oracle_service.sessionsCurrent, oracle_service.sessionsHighWater, oracle_service.usersMax, oracle_service.cpuCountCurrent, oracle_service.cpuCoreCountCurrent, oracle_service.cpuSocketCountCurrent, oracle_service.cpuCountHighwater, oracle_service.cpuCoreCountHighwater, oracle_service.cpuSocketCountHighwater, cloud_providers.name AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id JOIN cloud_providers ON cloud_providers.enable = 'True' JOIN oracle_service ON host.id = oracle_service.hostId AND oracle_service.historic = 0 JOIN ip ON ip.host_id = host.id JOIN cpu ON cpu.host_id = host.id JOIN memory ON memory.host_id = host.id LEFT JOIN utilization_summary uts ON uts.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total, AVG(used_percent) AS used_percentage FROM storage GROUP BY host_id) AS storage ON storage.host_id = host.id LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE service.type = 'Database' AND service.name = 'oracle' AND host.status = 'success' AND host.historic = 0 AND oracle_service.status = 'Completed';"} }
);


// Date : 13-Sep-2022 MHD-5679 - OS Migration Strategy
db.block.update(
   {plugin:"MySQL" , name:"OS Migration Strategy"},
   { $set: { query: "SELECT DISTINCT h.id, h.name AS 'Host Name', h.ip AS 'IP Address', h.platform AS 'Platfom', h.operating_system AS 'Operating System', CONCAT(h.operating_system, ' ', h.version) AS 'OS Version', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.migration_strategy AS 'OS Migration Strategy', if(ias.migration_type  = group_concat(distinct sas.migration_type),ias.migration_type,ifnull(group_concat(distinct sas.migration_type),ias.migration_type)) 'Migration Type', ias.os_recommended_version AS 'OS Recommendation Version', cloud_providers.name AS 'Cloud Provider' FROM host h LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON h.id = ias.host_id   AND ias.cloud_provider = cloud_providers.name left join service on service.host_id = h.id left join  service_assessment_summary sas on sas.service_id = service.id and sas.cloud_provider = cloud_providers.name WHERE h.status = 'success' AND h.historic = 0 group by h.id,cloud_providers.name ORDER BY cloud_providers.name;"} }
);

// Date : 14-Sep-2022 MHD-5853 Reports -  New report blocks for EOSL ( Instance and service) in details
db.block.insert({
        "name"  : "Instance Assessments/EOSLs in Detail","queryType" : "query","reportType" : "table","query" : "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, CONCAT(host.operating_system, ' ', host.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', ias.server_type AS 'Server Type' , ias.cloud_provider 'Cloud Provider' FROM  host host left join cloud_providers cp on cp.enable = 'True' LEFT JOIN  instance_assessment_summary ias ON ias.host_id = host.id and cp.name = ias.cloud_provider WHERE host.historic = 0 AND host.status = 'success' order by ias.cloud_provider,host.id;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "All Instances Assessment details with EOSL, recommendations","existing" : "no"}) ;

db.block.insert({
        "name"  : "Service Assessments/EOSLs in Detail","queryType" : "query","reportType" : "table","query" : "select TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, CONCAT(host.operating_system,' ',host.version) AS 'OS Version', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', sas.cloud_provider AS 'Cloud Provider' from service join host on host.id = service.host_id left join cloud_providers cp on cp.enable = 'True' LEFT JOIN  service_assessment_summary sas ON service.id = sas.service_id and cp.name = sas.cloud_provider where host.historic =0 and host.status ='success' order by sas.cloud_provider,service.id ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "All Services Assessmen details with EOSL, recommendations","existing" : "no"}) ;



// Date : 16-Sep-2022 MHD-5683 - Chart Reports

db.block.insert({
        "name"  : "Platform Overview details","queryType" : "query","reportType" : "pie","query" : "select platform,count(*) from host where host.historic =0 and host.status ='success' group by platform;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "Platform Overview details","existing" : "no"}) ;
db.block.insert({
        "name"  : "Instance EOL Summary","queryType" : "query","reportType" : "doughnut","query" : "SELECT ifnull(ias.eol_status,'Unknown'),count(*) from  instance_assessment_summary ias join host on host.id = ias.host_id where host.status ='success' and host.historic =0 group by  ias.eol_status;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "Instance EOL Summary ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Instance Migration Type Summary","queryType" : "query","reportType" : "vertical_bar","query" : "SELECT ifnull(ias.migration_type,'Unknown'),count(*) from  instance_assessment_summary ias join host on host.id = ias.host_id where host.status ='success' and host.historic =0 group by  ias.migration_type;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "Instance Migration Type Summary ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Instance Migration Strategy Summary","queryType" : "query","reportType" : "vertical_bar","query" : "SELECT ifnull(ias.migration_strategy,'Unknown'),count(*) from  instance_assessment_summary ias join host on host.id = ias.host_id where host.status ='success' and host.historic =0 group by  ias.migration_strategy;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "Instance Migration Strategy Summary","existing" : "no"}) ;
db.block.insert({
        "name"  : "App service Services EOSL summary","queryType" : "query","reportType" : "doughnut","query" : "SELECT ifnull(sas.eol_status,'Unknown'),count(*) from  service_assessment_summary sas join service on service.id = sas.service_id where service.type!='Database' group by sas.eol_status;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "App service Services EOSL summary ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Databases EOSL Summary","queryType" : "query","reportType" : "doughnut","query" : "SELECT ifnull(sas.eol_status,'Unknown'),count(*) from  service_assessment_summary sas join service on service.id = sas.service_id where service.type ='Database' group by sas.eol_status;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "Databases EOSL Summary ","existing" : "no"}) ;
db.block.insert({
        "name"  : "Application Migration Strategy Summary","queryType" : "query","reportType" : "vertical_bar","query" : "SELECT ifnull(aas.migration_strategy,'Unknown'),count(*) from   application_assessment_summary aas group by  aas.migration_strategy ;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Chart","description" : "Application Migration Strategy Summary ","existing" : "no"}) ;

db.account.find({plugin:"MySQL",schema:"discovery"}).forEach(
    function(x) {
        db.block.update(
            {plugin:"MySQL"},
            { $set: { account: x._id.valueOf(), "createdAt": new Date()} },
            { "multi" : true }
        );
    }
);


// Date : 16-Sep2022 MHD-5899 Inventory Report - Port Communication - Direction and Foreign Address is not matching in UI and report
db.block.update(
   {plugin:"MySQL" , name:"Inventory_Ports_Details"},
   { $set: { query: "SELECT host.name AS Hostname, host.ip AS 'Local Address', host.domain AS Domain, ip.data_center AS Datacenter, ip.environment AS Environment, host.platform AS Platform, host.operating_system AS 'Operating System', host.version AS Version, (SELECT GROUP_CONCAT(IFNULL(application.name, 'Others')) FROM application_host_mapping JOIN host ON host.id = application_host_mapping.host_id JOIN application ON application.id = application_host_mapping.application_id WHERE host.ip = ps.local_address AND host.historic = 0) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.used_interface AS UsedInterface, ps.protocol AS Protocol, network AS 'Network', ps.direction AS Direction, ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.foreign_address AS 'Foreign Address', foreign_host_name AS 'Foreign Host Name', undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(IFNULL(application.name, 'Others')) FROM application_host_mapping JOIN host ON host.id = application_host_mapping.host_id JOIN application ON application.id = application_host_mapping.application_id WHERE host.ip = ps.foreign_address AND host.historic = 0) AS 'Forwign Host Mapped Apps', ps.status AS Status, ps.db_updated_datetime AS 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN port_summary ps ON host.id = ps.host_id JOIN ip ON ip.host_id = host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'port' AND active = 1 AND value = IFNULL(ps.local_port_number, '')) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'service' AND active = 1 AND VALUE = IFNULL(ps.local_service, '')) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'ip' AND active = 1 AND VALUE = ps.local_address) ;"} }
);

// Date : 30-Sep-2022 MHD-6154
// Dynamic Reports:Application Summary Details, Dependent Apps are not coming if the communication happens on private IP Inventory Report - Port Communication - Direction and Foreign Address is not matching in UI and report
use aiops-dev;
db.block.update(
   {plugin:"MySQL" , name:"Application Summary Details"},
   { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', ias.server_type AS 'Server Type', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', mssql_oracle.serverEdition AS 'DBServer Edition', mssql_oracle.sid AS 'SIDs', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id),',', (SELECT REPLACE(GROUP_CONCAT(DISTINCT app2.name), app.name, '') FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT (SELECT ip FROM public_private_ip_lookup WHERE private_ip = foreign_address LIMIT 1) FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), concat(app.name,','), ''), ',,', ',') AS 'Discovered Dependent Apps', aas.migration_strategy AS 'Migration Strategy', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(DISTINCT application_id) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', app.name AS 'Application With Environment', cp.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN service ON ahm.host_id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cp.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cp.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cp.name LEFT JOIN (SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, ms.sid AS SID, ms.serverEdition, 'MSSQL' FROM host h JOIN service ON service.host_id = h.id AND service.type = 'Database' AND service.name = 'mssql' JOIN mssql_service ms ON ms.hostid = h.id WHERE h.historic = 0 AND ms.status = 'Completed' UNION ALL SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, ms.SID, IF(IFNULL(ms.edition, '') = 'EE', 'Enterprise Edition', ms.edition) AS serverEdition, 'Oracle' FROM host h JOIN service ON service.host_id = h.id AND service.type = 'Database' AND service.name = 'oracle' JOIN oracle_service ms ON ms.hostid = h.id WHERE h.historic = 0 AND ms.status = 'Completed') AS mssql_oracle ON mssql_oracle.host_id = ahm.host_id AND mssql_oracle.service_id = service.id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(10, '%%') AND app.id LIKE IFNULL(NULL, '%%') AND host_outer.id IN (SELECT ahm1.host_id FROM application_host_mapping ahm1 WHERE ahm1.application_id LIKE IFNULL(NULL, '%%')) ORDER BY cp.name;"} }
);


// Date : 07-Oct-2022 MHD-6327 add target os details to report
use aiops-dev;
db.block.update(
   {plugin:"MySQL" , name:"Instance TCO Right Sizing"},
   { $set: { query: "SELECT `Host Name`, `IP Address`, `Domain Name`, `Platform`, `Operating System`, `OS Version`, `Server Type`, `Data Center`, `Line of Business`, `Region`, `Environment`, `Project`, `vCPU Count`, `Memory(GB)`, `Storage(GB)`, `FS Types`, `Cloud Instance Type`, `pass_service_name`, `IAAS On Demand Price($)`, `IAAS Reserved 1 year Price($)`, `IAAS Reserved 3 year Price($)`, `PAAS On Demand Price($)`, `PAAS Reserved 1 year Price($)`, `PAAS Reserved 3 year Price($)`, `Cloud Storage Type`, `Yearly Storage Price($)`, `Avg CPU Usage(%)`, ias.eol_status `EOL Status`, ias.os_recommended_version `Target Operating System`, ias.migration_strategy `Migration Strategy`, `Cloud Recommended vCPU Count`, `Avg Memory Usage(%)`, `Cloud Recommended Memory`, `Storage Usage(%)`, `IAAS Recommended Instance Type`, `IAAS Recommended On Demand Price($)`, `IAAS Recommended 1 year Price($)`, `IAAS Recommended 3 year Price($)`, `PAAS Recommended Instance Type`, `PAAS Recommended On Demand Price($)`, `PAAS Recommended 1 year Price($)`, `PAAS Recommended 3 year Price($)`, `Recommended Storage(GB)`, `Recommended Storage Price`, `Application`, `Cloud Provider` FROM tco_prices_consolidated JOIN cloud_providers cp ON cp.enable = 'True' AND tco_prices_consolidated.`Cloud Provider` = cp.name JOIN instance_assessment_summary ias ON ias.host_id = tco_prices_consolidated.host_id AND ias.cloud_provider = tco_prices_consolidated.`Cloud Provider` ORDER BY tco_prices_consolidated.`Cloud Provider`;"} }
);

// Date : 10-Oct-2022 MHD-6158 Adding account_id in dynamic reports - START
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Utilization Collection Job Status"},
        { $set: { query: "SELECT host.ip, COUNT(utilization.id) as 'Utilization Count' FROM host Join task on task.id=host.task_id LEFT JOIN    utilization ON utilization.host_id = host.id WHERE historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY host.ip ORDER BY 2 DESC;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Port Collection Job Status"},
        { $set: { query: "SELECT host.ip, COUNT(port.id) as 'Port Collection Count' FROM host join task on task.id=host.task_id LEFT JOIN port ON port.host_id = host.id WHERE historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY host.ip ORDER BY 2 DESC;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Job Execution Status(Utilization & Port Summary)"},
        { $set: { query: "SELECT 'Port Summary ' ,max(port_summary.db_updated_datetime) as 'Last Run ' from port_summary join host on host.id=port_summary.host_id join task on task.id=host.task_id and task.account_id LIKE IFNULL(NULL, '%%') union SELECT 'Utlization Summary ' ,max(db_created_datetime) as 'Last Run ' from utilization_summary ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Application Assessment Summary"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', (SELECT GROUP_CONCAT(CONCAT(' ', host.name)) FROM host JOIN application_host_mapping ahm ON ahm.host_id = host.id WHERE ahm.application_id = app.id) AS 'Host Names', (SELECT COUNT(DISTINCT host.name) FROM host JOIN application_host_mapping ahm ON ahm.host_id = host.id WHERE ahm.application_id = app.id) AS 'Number Of Hosts in Application', aas.migration_strategy AS 'Migration Strategy', aas.migration_complexity AS 'Migration Complexity', aas.migration_priority AS 'Migration Priority', aas.wave_group AS 'Application Migration Group', (SELECT GROUP_CONCAT(DISTINCT eol_status) FROM instance_assessment_summary ias JOIN application_host_mapping ahm ON ahm.host_id = ias.host_id WHERE ahm.application_id = app.id and ias.cloud_provider = cloud_providers.name) AS 'OS EOSL Status', (SELECT GROUP_CONCAT(DISTINCT eol_status) FROM service_assessment_summary sas JOIN service ON service.id = sas.service_id JOIN application_host_mapping ahm ON ahm.host_id = service.host_id WHERE ahm.application_id = app.id AND sas.cloud_provider = cloud_providers.name) AS 'Service EOSL Status', app.name AS 'Application with Environment', cloud_providers.name AS 'Cloud_provider' FROM  application app JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cloud_providers.name where app.account_id LIKE IFNULL(NULL, '%%') ORDER BY cloud_providers.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Application Summary Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.server_type AS 'Server Type', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', mssql_oracle.serverEdition AS 'DBServer Edition', mssql_oracle.sid AS 'SIDs', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id), (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), app.name, ''), ',,', ',') AS 'Discovered Dependent Apps', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(DISTINCT application_id) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', app.name AS 'Application With Environment', cp.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN service ON ahm.host_id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cp.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cp.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cp.name LEFT JOIN (SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct ms.serverEdition) AS serverEdition, 'MSSQL' FROM  host h JOIN service ON service.host_id = h.id    AND service.type = 'Database'   AND service.name = 'mssql' JOIN mssql_service ms ON ms.hostid = h.id WHERE   h.historic = 0 AND ms.status = 'Completed'   group by host_id,service.id UNION ALL SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct IF(IFNULL(ms.edition, '') = 'EE', 'Enterprise Edition', ms.edition)) AS serverEdition, 'Oracle' FROM host h JOIN service ON service.host_id = h.id AND service.type = 'Database' AND service.name = 'oracle' JOIN oracle_service ms ON ms.hostid = h.id WHERE h.historic = 0 AND ms.status = 'Completed'  group by h.id,service.id  ) AS mssql_oracle ON mssql_oracle.host_id = ahm.host_id AND mssql_oracle.service_id = service.id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') AND app.id LIKE IFNULL(NULL, '%%') AND host_outer.id IN (SELECT ahm1.host_id FROM application_host_mapping ahm1 WHERE ahm1.application_id LIKE IFNULL(NULL, '%%')) ORDER BY cp.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Application Interfacing Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host.name AS 'Host Name', host.ip AS 'Local IP Address', (SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm1 JOIN host host1 ON host1.id = ahm1.host_id JOIN application app1 ON app1.id = ahm1.application_id WHERE app1.account_id LIKE IFNULL(NULL, '%%') and host1.id = ps.host_id) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.foreign_address AS 'Foreign IP Address', ps.foreign_host_name AS 'Foreign Host Name', ps.undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm2 JOIN application app2 ON app2.id = ahm2.application_id JOIN host host2 ON host2.id = ahm2.host_id WHERE app2.account_id LIKE IFNULL(NULL, '%%') and host2.ip = (SELECT ip AS ip_address FROM public_private_ip_lookup pip WHERE pip.private_ip = ps.foreign_address LIMIT 1) AND host2.historic = 0) AS 'Foreign Host Mapped Apps', network AS 'Network', ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.direction AS Direction, ps.used_interface AS UsedInterface, ps.status AS Status, ps.protocol AS Protocol, app.name AS 'Application Name With Environment' FROM port_summary ps JOIN host host ON ps.host_id = host.id JOIN application_host_mapping ahm1 ON host.id = ahm1.host_id JOIN application app ON app.id = ahm1.application_id AND host.id = ahm1.host_id AND host.historic = 0 AND host.status = 'success' and app.account_id LIKE IFNULL(NULL, '%%') AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'ip' AND active = 1 AND VALUE = ps.local_address) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'port' AND active = 1 AND VALUE = ps.local_port_number) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'service' AND active = 1 AND VALUE = ps.local_service) AND ahm1.application_id LIKE IFNULL(NULL, '%%');"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Application TCO Right Sizing"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', GROUP_CONCAT(tcp.`Host Name`) AS 'Host Names', COUNT(tcp.`IP Address`) AS 'Host Count', SUM(tcp.`vCPU Count`) AS 'Logical Processors', SUM(tcp.`Storage(GB)`) AS 'Total Storage', tcp.`FS Types` AS 'FS Types', SUM(tcp.`Memory(GB)`) AS 'Total Memory', ROUND(tcp.`Avg CPU Usage(%)`, 2) AS 'CPU Usage%', SUM(tcp.`IAAS On Demand Price($)`) AS `IAAS OnDemand Price`, SUM(tcp.`IAAS Reserved 1 year Price($)`) AS `IAAS Reserved 1 year Price`, SUM(tcp.`IAAS Reserved 3 year Price($)`) AS `IAAS Reserved 3 year Price`, SUM(tcp.`PAAS On Demand Price($)`) AS `PAAS OnDemand Price`, SUM(tcp.`PAAS Reserved 1 year Price($)`) AS `PAAS Reserved 1 year Price`, SUM(tcp.`PAAS Reserved 3 year Price($)`) AS `PASS Reserved 3 year Price`, SUM(tcp.`Yearly Storage Price($)`) AS `Storage Price Yearly`, SUM(tcp.`IAAS Recommended On Demand Price($)`) AS `IAAS Recommended On Demand Price`, SUM(tcp.`IAAS Recommended 1 year Price($)`) AS `IAAS Recommended 1 year Price`, SUM(tcp.`IAAS Recommended 3 year Price($)`) AS `IAAS Recommended 3 year Price`, SUM(tcp.`PAAS Recommended On Demand Price($)`) AS `PAAS Recommended On Demand Price`, SUM(tcp.`PAAS Recommended 1 year Price($)`) AS `PAAS Recommended 1 year Price`, SUM(tcp.`PAAS Recommended 3 year Price($)`) AS `PASS Recommended 3 year Price`, SUM(tcp.`Recommended Storage Price`) AS `Recommended Storage Price Yearly`, app.name AS 'Application With Environment', tcp.`cloud Provider` AS 'Cloud Provider' FROM tco_prices_consolidated tcp JOIN cloud_providers ON cloud_providers.enable = 'True' AND cloud_providers.name = tcp.`cloud Provider` JOIN application_host_mapping ahm ON ahm.host_id = tcp.host_id JOIN application app ON app.id = ahm.application_id where app.account_id LIKE IFNULL(NULL, '%%') GROUP BY tcp.`cloud Provider` , app.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance Assessment Summary"},
        { $set: { query: "SELECT DISTINCT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(operating_system, ' ', version) AS 'OS Version', ias.server_type AS 'Server Type', (SELECT GROUP_CONCAT(app.name) FROM application app JOIN application_host_mapping ahm ON app.id = ahm.application_id WHERE ahm.host_id = host.id) AS 'Applications', ias.cpu_utilization AS 'CPU Utilization', ias.memory_utilization AS 'Memory Utilization', ias.storage_utilization AS 'Storage Utilization', ias.instance_activity AS 'Instance Activity', ias.migration_priority AS 'Migration Priority', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommended_version AS 'OS Recommended Version', ias.migration_strategy AS 'Migration Strategy', ias.migration_type AS 'Migration Type', ias.cloud_provider AS 'Cloud Provider' FROM host Join task on task.id=host.task_id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') AND host.status = 'success';"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance TCO Right Sizing"},
        { $set: { query: "SELECT `Host Name`, `IP Address`, `Domain Name`, tco.`Platform`, `Operating System`, `OS Version`, `Server Type`, `Data Center`, `Line of Business`, `Region`, `Environment`, `Project`, `vCPU Count`, `Memory(GB)`, `Storage(GB)`, `FS Types`, `Cloud Instance Type`, `pass_service_name`, `IAAS On Demand Price($)`, `IAAS Reserved 1 year Price($)`, `IAAS Reserved 3 year Price($)`, `PAAS On Demand Price($)`, `PAAS Reserved 1 year Price($)`, `PAAS Reserved 3 year Price($)`, `Cloud Storage Type`, `Yearly Storage Price($)`, `Avg CPU Usage(%)`, ias.eol_status `EOL Status`, ias.os_recommended_version `Target Operating System`, ias.migration_strategy `Migration Strategy`, `Cloud Recommended vCPU Count`, `Avg Memory Usage(%)`, `Cloud Recommended Memory`, `Storage Usage(%)`, `IAAS Recommended Instance Type`, `IAAS Recommended On Demand Price($)`, `IAAS Recommended 1 year Price($)`, `IAAS Recommended 3 year Price($)`, `PAAS Recommended Instance Type`, `PAAS Recommended On Demand Price($)`, `PAAS Recommended 1 year Price($)`, `PAAS Recommended 3 year Price($)`, `Recommended Storage(GB)`, `Recommended Storage Price`, `Application`, `Cloud Provider` FROM tco_prices_consolidated tco join host on host.id=tco.host_id join task on task.id=host.task_id JOIN cloud_providers cp ON cp.enable = 'True' AND tco.`Cloud Provider` = cp.name JOIN instance_assessment_summary ias ON ias.host_id = tco.host_id AND ias.cloud_provider = tco.`Cloud Provider` where task.account_id LIKE IFNULL(NULL, '%%') ORDER BY tco.`Cloud Provider`;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"OS EOSL Summary"},
        { $set: { query: "SELECT host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS 'OS Version ', COUNT(host.name) AS 'Count', ias.eol_status AS 'EOL Status', ias.support_date AS 'OS Support End Date', ias.migration_strategy AS 'OS Migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', cloud_providers.name AS 'Cloud Provider' FROM host Join task on task.id=host.task_id  LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary AS ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 AND host.status = 'success' and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY host.operating_system , host.version , cloud_providers.name ORDER BY cloud_providers.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Service EOSL Summary"},
        { $set: { query: "SELECT service.type AS 'Service Type', IFNULL(CONCAT(service.name, ' ', IFNULL(service.version, '')), service.name) AS 'Service Name ', COUNT(service.name) AS Count, sas.eol_status AS 'EOL Status', sas.support_date AS 'Support Date ', sas.recommended_version AS 'Recommended Service', cloud_providers.name AS 'Cloud Provider' FROM host Join task on task.id=host.task_id JOIN service ON host.id = service.host_id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN service_assessment_summary sas ON service.id = sas.service_id AND sas.cloud_provider = cloud_providers.name WHERE host.status = 'success' AND host.historic = 0 AND service.type IS NOT NULL and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY service.name , service.version , cloud_providers.name ORDER BY cloud_providers.name , service.name ASC;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Service Migration Strategy"},
        { $set: { query: "SELECT DISTINCT s.name AS 'Service Name', s.type AS 'Service Type', s.version AS 'Service Version', h.ip AS 'IP Address', h.name AS 'Host Name', sas.eol_status AS ' Service EOSL Status', sas.support_date AS 'Service Support End Date', sas.recommended_version AS 'Recommended Service', cloud_providers.name AS 'Cloud Provider' FROM service s LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' JOIN host h ON s.host_id = h.id Join task on task.id=h.task_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = h.id LEFT JOIN service_assessment_summary sas ON sas.service_id = s.id WHERE h.status = 'success' AND h.historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') ORDER BY cloud_providers.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"OS Migration Strategy"},
        { $set: { query: "SELECT DISTINCT h.id, h.name AS 'Host Name', h.ip AS 'IP Address', h.platform AS 'Platfom', h.operating_system AS 'Operating System', CONCAT(h.operating_system, ' ', h.version) AS 'OS Version', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.migration_strategy AS 'OS Migration Strategy', IF(ias.migration_type = GROUP_CONCAT(DISTINCT sas.migration_type), ias.migration_type, IFNULL(GROUP_CONCAT(DISTINCT sas.migration_type), ias.migration_type)) 'Migration Type', ias.os_recommended_version AS 'OS Recommendation Version', cloud_providers.name AS 'Cloud Provider' FROM host h Join task on task.id=h.task_id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON h.id = ias.host_id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service ON service.host_id = h.id LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name WHERE h.status = 'success' AND h.historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY h.id , cloud_providers.name ORDER BY cloud_providers.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance Cloud Prices"},
        { $set: { query: "SELECT h.name 'Host Name', h.ip 'IP Address', CONCAT(h.operating_system, ' ', h.version) 'OS Version', h.instance_type 'Instance Type', ip.region 'Region', ip.data_center 'Data Center', ip.environment 'Environment', GROUP_CONCAT(DISTINCT app.name) 'Applications', FORMAT(icp.instance_vcpu, 0) 'Instance CPU', icp.instance_storage 'Instance Storage', icp.instance_memory 'Instance Memory', icp.instance_type 'Cloud Instance Type', icp.preferred_plan, icp.on_demand_price 'OnDemand Price', (icp.on_demand_price + actual_storage_price) 'OnDemand Total Price', icp.reserved_1_year_price 'Reserved 1 Yr Price', (icp.reserved_1_year_price + actual_storage_price) 'Reserved 1 Yr Total Cost', icp.reserved_3_year_price 'Reserved 3 Yr Price', (icp.reserved_3_year_price + actual_storage_price) 'Reserved 3 Yr Total Cost', icp.actual_storage_price 'Storage Cost', icp.recommended_instance_type 'Recommended Instance Type', icp.recommended_vcpu_count 'Recommended vCPU Count', icp.recommended_memory 'Recommended Memory', icp.recommended_storage 'Recommended Storage', icp.recommended_on_demand_price 'Recommended OnDemand Price', (icp.recommended_on_demand_price + recommended_storage_price) 'Recommended OnDemand Total Cost', icp.recommended_1_year_price 'Recommended 1 Yr Price', (icp.recommended_1_year_price + recommended_storage_price) 'Recommended 1 Yr Total Cost', icp.recommended_3_year_price 'Recommended 3 Yr Price', (icp.recommended_3_year_price + icp.recommended_storage_price) 'Recommended 3 Yr Total Cost', icp.recommended_storage_price 'Recommended Storage Price ', icp.recommended_preferred_plan, icp.customer_recommended_vcpu_count 'Cust Recommended vcpu Count ', icp.customer_recommended_memory 'Cust Recommended Memory ', icp.customer_recommended_storage 'Cust Recommended Storage ', icp.customer_recommended_instance_type 'Cust Recommended Instance Type ', icp.customer_recommended_on_demand_price 'Cust Recommended On Demand Price', (icp.customer_recommended_on_demand_price + customer_recommended_storage_price) 'Cust Recommended On Demand Price', icp.customer_recommended_1_year_price 'Cust Recommended 1 Yr Price ', (icp.customer_recommended_1_year_price + customer_recommended_storage_price) 'Cust Recommended 1 Yr Total Cost ', icp.customer_recommended_3_year_price 'Cust Recommended 3 Yr Cost ', (icp.customer_recommended_3_year_price + customer_recommended_storage_price) 'Cust Recommended 3 Yr Total Cost ', icp.customer_recommended_storage_price 'Cust Recommended Storage Price', icp.customer_recommended_preferred_plan 'Cust Recommended Preferred Plan', uts.average_cpu_percent 'CPU Usage(%)', uts.average_memory_percent 'Memory Usage(%)', uts.average_storage_percent 'Storage Usage(%)', ias.migration_type 'migration_type', tpt.region 'Cloud Region', tpt.storage_type 'Cloud Region', ias.migration_strategy 'OS Migration Strategy', ias.os_recommended_version 'OS Recommended Version', ias.eol_status 'OS EOSL Status', ias.server_type 'Server Type', cp.name 'Cloud Provider' FROM host h Join task on task.id=h.task_id LEFT JOIN cloud_providers cp ON cp.enable = 'True' JOIN ip ON ip.host_id = h.id LEFT JOIN application_host_mapping ahm ON ahm.host_id = h.id LEFT JOIN application app ON app.id = ahm.application_id LEFT JOIN instance_cloud_prices icp ON icp.host_id = h.id AND cp.name = icp.cloud_provider LEFT JOIN tco_page_template tpt ON tpt.id = icp.template_id AND tpt.cloud_provider = cp.name LEFT JOIN utilization_summary uts ON uts.host_id = h.id LEFT JOIN instance_assessment_summary ias ON ias.host_id = h.id AND cp.name = ias.cloud_provider WHERE h.status = 'success' AND h.historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY h.ip;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Host Details"},
        { $set: { query: "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS Domain, host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS Version, IFNULL(ip.data_center, ' ') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, ' ') AS 'Region', IFNULL(ip.environment, ' ') AS 'Environment', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', GROUP_CONCAT(DISTINCT IFNULL(application_review.name, ' ')) AS 'Application Name', host.device_type AS 'Device Type', host.instance_type AS 'Instance Type', host.manufacturer AS Manufacturer, host.product_name AS 'Product Name', host.serial_number AS 'Serial No', host.service_provider AS 'Service Provider', host.bios_configuration AS 'BIOS Configuration', host.instruction_set AS 'Instruction Set', host.sku AS SKU, host.installed_on AS 'Installed On', memory.`total` AS `Memory`, cpu.logical_processors AS 'Logical Processors', host.timezone AS Timezone, host.uptime AS Uptime, host.pagefile_size AS 'Pagefile Size', host.internet_access AS 'Internet Access', host.rdc AS Rdc, host.gateway_ip AS 'Gateway IP', host.system_date AS 'System Date', host.power_status AS 'Power Status' FROM host Join task on task.id=host.task_id JOIN ip ON ip.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN cpu ON cpu.host_id = host.id LEFT JOIN memory ON memory.host_id = host.id LEFT JOIN application_host_mapping_review ON application_host_mapping_review.host_id = host.id AND application_host_mapping_review.active = 1 LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND cloud_providers.name = ias.cloud_provider LEFT JOIN application_review ON application_review.id = application_host_mapping_review.application_id WHERE host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' and task.account_id LIKE IFNULL(NULL, '%%')  GROUP BY host.id;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"App Host,Service counts"},
        { $set: { query: "SELECT DISTINCT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'app_name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', COUNT(DISTINCT ahm.host_id) AS 'Instance Count ', (SELECT COUNT(*) FROM service JOIN host ON host.id = service.host_id JOIN application_host_mapping ahm_inner ON ahm_inner.application_id = app.id AND host.id = ahm_inner.host_id WHERE host.status = 'success' AND host.historic = 0) AS 'Service Count', COUNT(DISTINCT dap.id) AS 'Shared Application Count', COUNT(DISTINCT dahm.host_id) AS 'Shared Instance Count', app.name AS 'Application Name with Environment', app.business_criticality AS 'Business Criticality' FROM application app LEFT JOIN application_host_mapping ahm ON app.id = ahm.application_id LEFT JOIN host h ON h.id = ahm.host_id LEFT JOIN application_host_mapping dahm ON ahm.host_id = dahm.host_id AND dahm.application_id != app.id LEFT JOIN application dap ON dap.id = dahm.application_id AND dap.id != app.id WHERE h.historic = 0 AND h.status = 'Success' and app.account_id LIKE IFNULL(NULL, '%%') GROUP BY app.id ORDER BY CASE WHEN app_name LIKE '%-%city%' THEN REPLACE(app_name, '-', 'j') ELSE app_name END , environment;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Host Details With Service Count"},
        { $set: { query: "SELECT host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', IFNULL(ip.data_center, 'Others') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, 'Others') AS 'Region', IFNULL(ip.environment, 'Others') AS 'Environment', host_outer.device_type AS 'Device Type', host_outer.instance_type AS 'Instance Type', host_outer.manufacturer AS Manufacturer, host_outer.product_name AS 'Product Name', host_outer.serial_number AS 'Serial No', host_outer.service_provider AS 'Service Provider', host_outer.bios_configuration AS 'BIOS Configuration', host_outer.instruction_set AS 'Instruction Set', host_outer.sku AS SKU, ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id), (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), app.name, ''), ',,', ',') AS 'Discovered Dependent Apps', aas.migration_strategy AS 'Migration Strategy', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(*) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', group_concat(app.name) as 'Tagged Applications' , cloud_providers.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN ip ON ip.host_id = host_outer.id LEFT JOIN cpu ON cpu.host_id = host_outer.id LEFT JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN service ON host_outer.id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cloud_providers.name WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') group by host_outer.id,cloud_providers.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Service Details"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname, hserd.name 'Service Name', concat(hserd.name,' ',hserd.version) AS Version,hserd.status AS Status, hserd.type AS 'Service Type', hserd.port AS Port, hserd.cpu_percent AS 'CPU Percent', hserd.memory_percent AS 'Memory Percent', hserd.path AS 'Service Path'  FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN service hserd ON host.id = hserd.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic = 0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"SQL Aggregate Report"},
        { $set: { query: "SELECT service.name AS 'Service', mssql_service.instanceName AS 'DB Name', mssql_service.sid AS 'sid', service.version AS 'Version', host.name AS 'Host Name', host.ip AS 'IP Address', CONCAT(host.operating_system, ' ', host.version) AS 'Operating System', ip.environment AS 'Environment', host.instance_type AS 'Instance Type', host.manufacturer AS 'Make', host.product_name AS 'Model', host.instruction_set AS 'OS Architecture', cpu.model_name AS 'CPU Model', cpu.logical_processors AS 'vCPU', memory.total AS 'Total Memory', uts.average_memory_percent AS 'Memory Used(%)', storage.total AS 'Total Storage', uts.average_storage_percent AS 'Storage Used(%)', sas.eol_status AS 'EOL Status', sas.recommended_version AS 'Service Recommandation', service.status, service.reason, mssql_service.productLevel, mssql_service.serverEdition, mssql_service.clustered, mssql_service.clusterName, mssql_service.clusterRole, mssql_service.totalPageFileInMB, mssql_service.availablePageFileInMB, mssql_service.kernalPagedPoolInMB, mssql_service.kernalNonPagedPoolInMB, mssql_service.systemMemoryStateDescription, mssql_service.tables, mssql_service.views, mssql_service.procedures, mssql_service.triggers, mssql_service.functions, mssql_service.users, mssql_service.databases, mssql_service.ssis, mssql_service.ssrs, mssql_service.ssas, mssql_service.sqljobs, mssql_service.highAvailability, mssql_service.disasterRecovery, mssql_service.collation, mssql_service.serviceBroker, cloud_providers.name AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id Join task on task.id=host.task_id LEFT JOIN mssql_service ON host.id = mssql_service.hostId AND mssql_service.historic = 0 JOIN ip ON ip.host_id = host.id JOIN cpu ON cpu.host_id = host.id JOIN utilization_summary uts ON uts.host_id = host.id JOIN memory ON memory.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total, AVG(used_percent) AS used_percentage FROM storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name WHERE service.type = 'Database' AND service.name = 'mssql' AND host.status = 'success' AND host.historic = 0 AND mssql_service.status = 'Completed' and task.account_id LIKE IFNULL(NULL, '%%') ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Oracle Aggregate Report"},
        { $set: { query: "SELECT service.name AS 'DB Service', oracle_service.dbName AS 'DB Name', oracle_service.sid AS 'SID', service.version AS 'Version', oracle_service.databasePort AS 'port', host.name AS 'Host Name', host.ip AS 'IP Address', CONCAT(host.operating_system, ' ', host.version) AS 'Operating System', ip.environment AS 'Environment', host.instance_type AS 'Instance Type', host.manufacturer AS 'Make', host.product_name AS 'Model', host.instruction_set AS 'OS Architecture', cpu.model_name AS 'CPU Model', cpu.logical_processors AS 'vCPU', memory.total AS 'Total Memory', uts.average_memory_percent AS 'Memory Used(%)', storage.total AS 'Total Storage', uts.average_storage_percent AS 'Storage Used(%)', ias.eol_status AS 'OS EOL Status', ias.os_recommendation AS 'OS Recommendation', sas.eol_status AS 'Service EOL Status', sas.recommendation AS 'Service Recommendation', oracle_service.edition, oracle_service.instanceRole, oracle_service.instanceModel, oracle_service.reason, oracle_service.isExaData, oracle_service.isATP, oracle_service.totalPhysicalMemoryInMB, oracle_service.availablePhysicalMemoryInMB, oracle_service.localListener, oracle_service.tables, oracle_service.views, oracle_service.procedures, oracle_service.triggers, oracle_service.functions, oracle_service.users, oracle_service.varrays, oracle_service.fixedSizeInBytes, oracle_service.variableSizeInBytes, oracle_service.databaseBuffersInBytes, oracle_service.redoBuffersInBytes, oracle_service.parameterFileIOTotalWaits, oracle_service.diskFileOperationsIOTotalWaits, oracle_service.dbFileParallelReadTotalWaits, oracle_service.dbFileParallelWriteTotalWaits, oracle_service.logFileParallelWriteTotalWaits, oracle_service.dbSizeInGB, oracle_service.databaseVersion, oracle_service.nlsCharacterset, oracle_service.databaseBlockSize, oracle_service.racCluster, oracle_service.lOBs, oracle_service.externalTables, oracle_service.materializedView, oracle_service.directoryObjects, oracle_service.dbLink, oracle_service.sessionsMax, oracle_service.sessionsWarning, oracle_service.sessionsCurrent, oracle_service.sessionsHighWater, oracle_service.usersMax, oracle_service.cpuCountCurrent, oracle_service.cpuCoreCountCurrent, oracle_service.cpuSocketCountCurrent, oracle_service.cpuCountHighwater, oracle_service.cpuCoreCountHighwater, oracle_service.cpuSocketCountHighwater, cloud_providers.name AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id Join task on task.id=host.task_id JOIN cloud_providers ON cloud_providers.enable = 'True' JOIN oracle_service ON host.id = oracle_service.hostId AND oracle_service.historic = 0 JOIN ip ON ip.host_id = host.id JOIN cpu ON cpu.host_id = host.id JOIN memory ON memory.host_id = host.id LEFT JOIN utilization_summary uts ON uts.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total, AVG(used_percent) AS used_percentage FROM storage GROUP BY host_id) AS storage ON storage.host_id = host.id LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE service.type = 'Database' AND service.name = 'oracle' AND host.status = 'success' AND host.historic = 0 AND oracle_service.status = 'Completed' and task.account_id LIKE IFNULL(NULL, '%%');"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Host Distinct OS Version"},
        { $set: { query: "SELECT DISTINCT host.operating_system as 'Operating System ',host.version as 'OS Version' ,host.release_version as 'Release Version' from host Join task on task.id=host.task_id where host.historic = 0 and host.status ='success' and task.account_id LIKE IFNULL(NULL, '%%') order by  host.operating_system ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Service distinct version"},
        { $set: { query: "SELECT DISTINCT service.name, service.version FROM service JOIN host ON host.id = service.host_id Join task on task.id=host.task_id WHERE host.historic = 0 AND host.status = 'success' AND service.name IS NOT NULL and task.account_id LIKE IFNULL(NULL, '%%');"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Utilization Summary"},
        { $set: { query: "SELECT host.name AS Hostname, host.ip AS 'IP Address', host.domain AS 'Domain Name', utilization.count AS 'Collected Utilizations Count', cpu.logical_processors AS 'Vcpu Count', utilization.min_CPU_Utilization_Percent AS 'Min CPU Utilization Percent', utilization.max_CPU_Utilization_Percent AS 'Max CPU Utilization Percent', ROUND(uts.average_cpu_percent, 2) AS 'Avg CPU Utilization Percent ', memory.total AS 'Total Memory', utilization.min_Memory_Utilization_Percent AS 'Min Memory Utilization Percent', utilization.max_Memory_Utilization_Percent AS 'Max Memory Utilization Percent', ROUND(uts.average_memory_percent, 2) AS 'Avg Memory Utilization Percent', storage.total AS 'Total Storage', utilization.min_Storage_Utilization_Percent AS 'Min Storage Utilization Percent', utilization.max_Storage_Utilization_Percent AS 'Max Storage Utilization Percent', ROUND(uts.average_storage_percent, 2) AS 'Avg Storage Utilization Percent', (SELECT GROUP_CONCAT(DISTINCT app.name) FROM application_review app LEFT JOIN application_host_mapping_review ahmr ON app.id = ahmr.application_id WHERE ahmr.host_id = host.id) AS 'Mapped Application Name(s)' FROM host Join task on task.id=host.task_id JOIN  cpu ON cpu.host_id = host.id AND host.historic = 0 JOIN memory ON memory.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total FROM storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id JOIN (SELECT host_id, ROUND(MIN(memory_percent), 2) AS min_memory_utilization_percent, ROUND(MIN(cpu_percent), 2) AS min_cpu_utilization_percent, ROUND(MIN(storage_percent), 2) AS min_storage_utilization_percent, ROUND(MAX(memory_percent), 2) AS max_memory_utilization_percent, ROUND(MAX(cpu_percent), 2) AS max_cpu_utilization_percent, ROUND(MAX(storage_percent), 2) AS max_storage_utilization_percent, COUNT(*) AS count FROM utilization GROUP BY host_id) AS utilization ON host.id = utilization.host_id LEFT JOIN utilization_summary uts ON uts.host_id = host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' and task.account_id LIKE IFNULL(NULL, '%%') ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Hardware Summary"},
        { $set: { query: "SELECT manufacturer AS 'Manufacturer', product_name as 'Product Name' , COUNT(*) AS Count FROM host Join task on task.id=host.task_id WHERE host.status = 'success' AND host.historic = 0 AND host.manufacturer NOT IN ('' , ' ')  and task.account_id LIKE IFNULL(NULL, '%%') GROUP BY manufacturer , product_name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Platform Overview"},
        { $set: { query: "SELECT platform as 'Platform', count(*) as Count from host Join task on task.id=host.task_id where host.status = 'success' and host.historic = 0  and  task.account_id LIKE IFNULL(NULL, '%%') group by platform;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Physical vs Virtual Summary (Instance Type Overview)"},
        { $set: { query: "SELECT instance_type as 'Instance Type', count(*) as Count from host Join task on task.id=host.task_id where host.status = 'success' and host.historic = 0 and task.account_id LIKE IFNULL(NULL, '%%') group by instance_type;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Storage Report"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hstd.disk as Disk, hstd.file_system as FileSystem, hstd.total as Total, hstd.used as Used, hstd.available as Available, hstd.used_percent as 'Used Percent', hstd.mounted as Mounted, hstd.boot_partition as 'Boot Partition', hstd.logical_disk as LogicalDisk, hstd.volume_serial_number as 'Volume Serial Number', hstd.`compressed` as `Compressed` from task dtl join host host on dtl.id=host.task_id join storage hstd on hstd.host_id= host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Network Report (Interfaces)"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hind.name as InterfaceName, hind.type as Type, hind.mac_address as MACAddress, hind.ip_address as IPAddress, hind.speed as Speed, hind.status as Status, hind.ip_subnet as 'IP Subnet', hind.dhcp_enabled as 'DHCP Enabled', hind.dns_server as 'DNS Server', hind.description as Description from task dtl join host host on dtl.id=host.task_id join interface hind on host.id= hind.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Software Report (Packages)"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hpkd.name  AS 'Package Name', hpkd.version AS 'Package Version',hpkd.repository  AS Repository from task dtl join host host on dtl.id=host.task_id join package hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"User Login Details"},
        { $set: { query: "SELECT DISTINCT host.ip AS IP, host.name AS Hostname, DATE_FORMAT(lh.time, '%m-%d-%Y') AS Date, lh.user_name AS UserName, lh.server_ip AS 'Source ServerIP' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN login_history lh ON host.id = lh.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success';"} }
);

db.block.update(
        {plugin:"MySQL" , name:"CronJobs - Windows"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname, scheduled.taskname as 'Task Name', scheduled.task_to_run as 'Task to Run', scheduled.author as 'Author', scheduled.run_as_user as 'Run as User', scheduled.scheduled_task_state as 'Scheduled Task State', scheduled.status as 'Status', scheduled.last_run_time as 'Last Run Time', scheduled.next_run_time as 'Next Run Time', scheduled.schedule_type as 'Schedule Type', scheduled.start_time as 'Start Time', scheduled.start_date as 'Start Date', scheduled.end_date as 'End Date' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled ON host.id = scheduled.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success'  and host.platform ='Windows' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"CronJobs - linux"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname,scheduled.command as 'Command', scheduled.minute as 'Minute', scheduled.hour as 'Hour', scheduled.day_of_the_month as 'Day of the Month', scheduled.month_of_the_year as 'Month of the Year', scheduled.day_of_the_week as 'Day of the Week' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled ON host.id = scheduled.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success'  and  host.platform ='Linux' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Process Report"},
        { $set: { query: "SELECT ps.local_service, pr.product, pr.product_version FROM (SELECT DISTINCT local_service FROM port_summary join host on host.id=port_summary.host_id join task on task.id=host.task_id where task.account_id='matilda-discovery-client') AS ps LEFT JOIN (SELECT DISTINCT raw_process.name, product, product_version FROM raw_process join host on host.id=raw_process.host_id join task on task.id=host.task_id where task.account_id LIKE IFNULL(NULL, '%%') ) pr ON ps.local_service = pr.name;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Package_Details"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hpkd.name  AS 'Package Name', hpkd.version AS 'Package Version',hpkd.repository  AS Repository from task dtl join host host on dtl.id=host.task_id join package hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Application_Port_Consolidation"},
        { $set: { query: "SELECT Application, `App Code`, `IP`, `Host Name`, `Platform`, `Operating System`, `Local Address`, `Local Service`, `Local Port`, `Direction`, `Foreign Address`, `Foreign Service`, `Foreign Port`, `Status` FROM (SELECT application.id AS application_id, application.name AS 'Application', application.app_code AS 'App Code', host.id AS host_id, host.ip AS 'IP', host.name AS 'Host Name', host.platform AS 'Platform', host.operating_system AS 'Operating System', port.local_address AS 'Local Address', port.local_service AS 'Local Service', port.number AS 'Local Port', port.direction AS Direction, port.foreign_address AS 'Foreign Address', port.service AS 'Foreign Service', port.foreign_port AS 'Foreign Port', port.status AS Status, port.process_id AS 'Process_Id' FROM application JOIN application_host_mapping ON application.id = application_host_mapping.application_id JOIN host ON application_host_mapping.host_id = host.id JOIN port ON host.id = port.host_id WHERE application.account_id LIKE IFNULL(NULL, '%%') and application_host_mapping.active = 1 AND port.direction = 'Outgoing' AND port.foreign_port NOT IN (3389 , 22, 5985, 5986, 443) AND port.service NOT IN ('explorer' , 'svchost', 'MpCmdRun', 'git-remote-ht', 'Idle', 'MsMpEng', 'System', 'sshd', 'ssh', 'Unknown')) subquery GROUP BY application_id , host_id , `Local Address` , `Foreign Address` , `Local Service` , `Foreign Service` , `Direction` ORDER BY application_id , host_id;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Utilization_Summary"},
        { $set: { query: "SELECT host.name AS Hostname, host.ip AS IP, host.domain AS Domain, ip.data_center AS Datacenter, ip.environment Environment, host.platform AS Platform, host.operating_system AS OperatingSystem, host.version AS Version, utilization.count AS 'Utilizations Count', cpu.logical_processors AS 'Vcpu Count', utilization.min_CPU_Utilization_Percent AS 'MIN CPU Utilization Percent', utilization.max_CPU_Utilization_Percent AS 'MAX CPU Utilization Percent', utilization.CPU_Utilization_Percent AS 'AVG CPU Utilization Percent ', memory.total AS 'Total Memory', utilization.min_Memory_Utilization_Percent AS 'MIN Memory Utilization Percent', utilization.max_Memory_Utilization_Percent AS 'MAX Memory Utilization Percent', utilization.Memory_Utilization_Percent AS 'AVG Memory Utilization Percent', storage.total AS 'Total Storage', utilization.min_Storage_Utilization_Percent AS 'MIN Storage Utilization Percent', utilization.max_Storage_Utilization_Percent AS 'MAX Storage Utilization Percent', utilization.Storage_Utilization_Percent AS 'AVG Storage Utilization Percent' FROM host Join task on task.id=host.task_id JOIN cpu ON cpu.host_id = host.id AND host.historic = 0 JOIN memory ON memory.host_id = host.id JOIN (SELECT host_id, SUM(total) AS total FROM storage WHERE IFNULL(type, '') NOT LIKE '%cifs%' AND IFNULL(type, '') NOT LIKE '%nfs%' AND IFNULL(type, '') NOT LIKE '%secfs2%' AND IFNULL(type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host_id) AS storage ON storage.host_id = host.id JOIN (SELECT host_id, ROUND(AVG(memory_percent), 2) AS memory_utilization_percent, ROUND(AVG(cpu_percent), 2) AS cpu_utilization_percent, ROUND(AVG(storage_percent), 2) AS storage_utilization_percent, ROUND(MIN(memory_percent), 2) AS min_memory_utilization_percent, ROUND(MIN(cpu_percent), 2) AS min_cpu_utilization_percent, ROUND(MIN(storage_percent), 2) AS min_storage_utilization_percent, ROUND(MAX(memory_percent), 2) AS max_memory_utilization_percent, ROUND(MAX(cpu_percent), 2) AS max_cpu_utilization_percent, ROUND(MAX(storage_percent), 2) AS max_storage_utilization_percent, COUNT(*) AS count FROM utilization GROUP BY host_id) AS utilization ON host.id = utilization.host_id JOIN ip ON ip.host_id = host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' and task.account_id LIKE IFNULL(NULL, '%%');"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Utilizations"},
        { $set: { query: "SELECT host.name AS Hostname, host.ip AS IP, host.domain AS Domain, ip.data_center AS Datacenter, ip.environment Environment, host.platform AS Platform, host.operating_system AS OperatingSystem, host.version AS Version, host.release_version AS ReleaseVersion, host.ip, host.name, `utilization`.`executiontime` AS Executiontime, `utilization`.`memory_percent` AS 'Memory Percent', `utilization`.`cpu_percent` AS 'Cpu Percent', `utilization`.`storage_percent` AS 'Storage Percent' FROM host Join task on task.id=host.task_id JOIN `utilization` ON utilization.host_id = host.id JOIN ip ON ip.host_id = host.id WHERE host.status = 'success' AND host.task_id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' and task.account_id LIKE IFNULL(NULL, '%%') ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Platform Overview details"},
        { $set: { query: "select platform,count(*) from host join task on task.id=host.task_id where host.historic =0 and host.status ='success' and task.account_id LIKE IFNULL(NULL, '%%') group by platform;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance EOL Summary"},
        { $set: { query: "SELECT ifnull(ias.eol_status,'Unknown'),count(*) from  instance_assessment_summary ias join host on host.id = ias.host_id join task on task.id=host.task_id where host.status ='success' and host.historic =0  and account_id LIKE IFNULL(NULL, '%%') group by  ias.eol_status;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance Migration Type Summary"},
        { $set: { query: "SELECT ifnull(ias.migration_type,'Unknown'),count(*) from  instance_assessment_summary ias join host on host.id = ias.host_id join task on task.id=host.task_id where host.status ='success' and host.historic =0 and task.account_id LIKE IFNULL(NULL, '%%') group by  ias.migration_type;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance Migration Strategy Summary"},
        { $set: { query: "SELECT ifnull(ias.migration_strategy,'Unknown'),count(*) from  instance_assessment_summary ias join host on host.id = ias.host_id join task on task.id=host.task_id where host.status ='success' and host.historic =0 and task.account_id LIKE IFNULL(NULL, '%%') group by  ias.migration_strategy;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"App service Services EOSL summary"},
        { $set: { query: "SELECT ifnull(sas.eol_status,'Unknown'),count(*) from  service_assessment_summary sas join service on service.id = sas.service_id join host on host.id=service.host_id join task on task.id=host.task_id where service.type!='Database' and task.account_id LIKE IFNULL(NULL, '%%') group by sas.eol_status;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Databases EOSL Summary"},
        { $set: { query: "SELECT ifnull(sas.eol_status,'Unknown'),count(*) from  service_assessment_summary sas join service on service.id = sas.service_id join host on host.id=service.host_id join task on task.id=host.task_id where service.type ='Database' and task.account_id LIKE IFNULL(NULL, '%%') group by sas.eol_status;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Application Migration Strategy Summary"},
        { $set: { query: "SELECT ifnull(aas.migration_strategy,'Unknown'),count(*) from   application_assessment_summary aas join application on application.id=aas.application_id where application.account_id LIKE IFNULL(NULL, '%%') group by  aas.migration_strategy ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Instance Assessments/EOSLs in Detail"},
        { $set: { query: "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, CONCAT(host.operating_system, ' ', host.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', ias.server_type AS 'Server Type', ias.cloud_provider 'Cloud Provider' FROM host host join task on task.id=host.task_id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND cp.name = ias.cloud_provider WHERE host.historic = 0 AND host.status = 'success' and task.account_id LIKE IFNULL(NULL, '%%') ORDER BY ias.cloud_provider , host.id;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Service Assessments/EOSLs in Detail"},
        { $set: { query: " SELECT TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, CONCAT(host.operating_system, ' ', host.version) AS 'OS Version', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', sas.cloud_provider AS 'Cloud Provider' FROM service JOIN host ON host.id = service.host_id join task on task.id=host.task_id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN service_assessment_summary sas ON service.id = sas.service_id AND cp.name = sas.cloud_provider WHERE host.historic = 0 AND host.status = 'success' AND task.account_id LIKE IFNULL(NULL, '%%') ORDER BY sas.cloud_provider , service.id;"} }
);
// Date : 10-Oct-2022 MHD-6158 Adding account_id in dynamic reports - END

// Date : 11-Oct-2022 MHD-6339 Enhance the instance TCO block to show the storage disk and storage values
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Instance TCO Right Sizing"},
        { $set: { query: "SELECT `Host Name`, `IP Address`, `Domain Name`, tco.`Platform`, `Operating System`, `OS Version`, `Server Type`, `Data Center`, `Line of Business`, `Region`, `Environment`, `Project`, `vCPU Count`, `Memory(GB)`, (SELECT IF(host.platform = 'Windows', GROUP_CONCAT(DISTINCT CONCAT(disk, ':', total, 'GB ')), GROUP_CONCAT(DISTINCT CONCAT(mounted, ':', total, 'GB '))) FROM storage JOIN host ON host.id = storage.host_id WHERE storage.host_id = tco.host_id AND IFNULL(storage.type, '') NOT LIKE '%cifs%' AND IFNULL(storage.type, '') NOT LIKE '%nfs%' AND IFNULL(storage.type, '') NOT LIKE '%secfs2%' AND IFNULL(storage.type, '') NOT LIKE '%fuse.sshfs%' GROUP BY host.id) `Storage Disk`, `Storage(GB)` as `Total Storage(GB)`, `FS Types`, `Cloud Instance Type`, `pass_service_name`, `IAAS On Demand Price($)`, `IAAS Reserved 1 year Price($)`, `IAAS Reserved 3 year Price($)`, `PAAS On Demand Price($)`, `PAAS Reserved 1 year Price($)`, `PAAS Reserved 3 year Price($)`, `Cloud Storage Type`, `Yearly Storage Price($)`, `Avg CPU Usage(%)`, ias.eol_status `EOL Status`, ias.os_recommended_version `Target Operating System`, `Cloud Recommended vCPU Count`, `Avg Memory Usage(%)`, `Cloud Recommended Memory`, `Storage Usage(%)`, `IAAS Recommended Instance Type`, `IAAS Recommended On Demand Price($)`, `IAAS Recommended 1 year Price($)`, `IAAS Recommended 3 year Price($)`, `PAAS Recommended Instance Type`, `PAAS Recommended On Demand Price($)`, `PAAS Recommended 1 year Price($)`, `PAAS Recommended 3 year Price($)`, `Recommended Storage(GB)`, `Recommended Storage Price`, `Application`, `Cloud Provider` FROM tco_prices_consolidated tco JOIN host ON host.id = tco.host_id JOIN task ON task.id = host.task_id JOIN cloud_providers cp ON cp.enable = 'True' AND tco.`Cloud Provider` = cp.name JOIN instance_assessment_summary ias ON ias.host_id = tco.host_id AND ias.cloud_provider = tco.`Cloud Provider` WHERE task.account_id LIKE IFNULL(NULL, '%%') ORDER BY tco.`Cloud Provider`; "} }
);

// Date : 12-Oct-2022 MHD-6350  adding process details in application details reports and assessment reports
use aiops-dev;
db.block.insert({
        "name"  : "Application Process Details","queryType" : "query","reportType" : "table","query" : "SELECT DISTINCT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', ias.server_type AS 'Server Type', IFNULL(raw_process_view.process_name, '') `Process Name`, IFNULL(raw_process_view.path, '') `Process Path`, IFNULL(raw_process_view.product, '') `Product`, IFNULL(raw_process_view.product_version, '') `Product Version`, cp.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cp.name JOIN raw_process_view ON host_outer.id = raw_process_view.host_id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') AND app.id LIKE IFNULL(NULL, '%%') ORDER BY cp.name;", "account" : "account" ,"plugin" : "MySQL","blockType" : "Assessment Summary","description" : "Instances Right Sizing and TCO information","existing" : "no"}) ;

db.account.find({plugin:"MySQL",schema:"discovery"}).forEach(
    function(x) {
        db.block.update(
            {plugin:"MySQL"},
            { $set: { account: x._id.valueOf(), "createdAt": new Date()} },
            { "multi" : true }
        );
    }
);

// Date : 17-Oct-2022 MHD-6400 Updating the query with status=success and historic=0
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"App service Services EOSL summary"},
        { $set: { query: "SELECT ifnull(sas.eol_status,'Unknown'),count(*) from  service_assessment_summary sas join service on service.id = sas.service_id join host on host.id=service.host_id join task on task.id=host.task_id where service.type!='Database' and task.account_id LIKE IFNULL(NULL, '%%') and host.historic=0 and host.status='success' group by sas.eol_status;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Databases EOSL Summary"},
        { $set: { query: "SELECT ifnull(sas.eol_status,'Unknown'),count(*) from  service_assessment_summary sas join service on service.id = sas.service_id join host on host.id=service.host_id join task on task.id=host.task_id where service.type ='Database' and task.account_id LIKE IFNULL(NULL, '%%') and host.historic=0 and host.status='success' group by sas.eol_status;"} }
);

// Date : 18-Oct-2022 MHD-6450 Removing matilda-discovery-client
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Process Report"},
        { $set: { query: "SELECT ps.local_service, pr.product, pr.product_version FROM (SELECT DISTINCT local_service FROM port_summary join host on host.id=port_summary.host_id join task on task.id=host.task_id where task.account_id LIKE IFNULL(NULL, '%%')) AS ps LEFT JOIN (SELECT DISTINCT raw_process.name, product, product_version FROM raw_process join host on host.id=raw_process.host_id join task on task.id=host.task_id where task.account_id LIKE IFNULL(NULL, '%%') ) pr ON ps.local_service = pr.name;"} }
);

// Date : 11-Nov-2022 MHD-6784 Instance Migration Type values are not matching with the Instance list assessments in UI
db.block.update(
        {plugin:"MySQL" , name:"Instance Assessment Summary"},
        { $set: { query: "SELECT DISTINCT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS 'OS Version', ias.server_type AS 'Server Type', (SELECT GROUP_CONCAT(app.name) FROM application app JOIN application_host_mapping ahm ON app.id = ahm.application_id WHERE ahm.host_id = host.id) AS 'Applications', ias.cpu_utilization AS 'CPU Utilization', ias.memory_utilization AS 'Memory Utilization', ias.storage_utilization AS 'Storage Utilization', ias.instance_activity AS 'Instance Activity', ias.migration_priority AS 'Migration Priority', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommended_version AS 'OS Recommended Version', ias.migration_strategy AS 'Migration Strategy', ifnull(group_concat(distinct sas.migration_type),ias.migration_type) 'Migration Type', ias.cloud_provider AS 'Cloud Provider' FROM host LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name left join service on service.host_id = host.id left join service_assessment_summary sas on sas.service_id = service.id and sas.cloud_provider = cloud_providers.name WHERE host.historic = 0 AND host.status = 'success' group by host.id;"} }
);
db.block.update(
        {plugin:"MySQL" , name:"Instance Migration Type Summary"},
        { $set: { query: "select ifnull(migration_type,'Pending'),count(*) from ( SELECT host.id,IFNULL(GROUP_CONCAT(DISTINCT sas.migration_type), ias.migration_type) 'migration_type' FROM host LEFT JOIN   cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN   instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN   service ON service.host_id = host.id LEFT JOIN   service_assessment_summary sas ON sas.service_id = service.id AND ias.cloud_provider = cloud_providers.name WHERE host.status = 'success' AND host.historic = 0 GROUP BY ias.cloud_provider,host.id ) as sub_query group by sub_query.migration_type;"} }
);
db.block.update(
        {plugin:"MySQL" , name:"Instance Cloud Prices"},
        { $set: { query: "SELECT h.name 'Host Name', h.ip 'IP Address', CONCAT(h.operating_system, ' ', h.version) 'OS Version', h.instance_type 'Instance Type', ip.region 'Region', ip.data_center 'Data Center', ip.environment 'Environment', GROUP_CONCAT(DISTINCT app.name) 'Applications', FORMAT(icp.instance_vcpu, 0) 'Instance CPU', icp.instance_storage 'Instance Storage', icp.instance_memory 'Instance Memory', icp.instance_type 'Cloud Instance Type', icp.preferred_plan, icp.on_demand_price 'OnDemand Price', (icp.on_demand_price + actual_storage_price) 'OnDemand Total Price', icp.reserved_1_year_price 'Reserved 1 Yr Price', (icp.reserved_1_year_price + actual_storage_price) 'Reserved 1 Yr Total Cost', icp.reserved_3_year_price 'Reserved 3 Yr Price', (icp.reserved_3_year_price + actual_storage_price) 'Reserved 3 Yr Total Cost', icp.actual_storage_price 'Storage Cost', icp.recommended_instance_type 'Recommended Instance Type', icp.recommended_vcpu_count 'Recommended vCPU Count', icp.recommended_memory 'Recommended Memory', icp.recommended_storage 'Recommended Storage', icp.recommended_on_demand_price 'Recommended OnDemand Price', (icp.recommended_on_demand_price + recommended_storage_price) 'Recommended OnDemand Total Cost', icp.recommended_1_year_price 'Recommended 1 Yr Price', (icp.recommended_1_year_price + recommended_storage_price) 'Recommended 1 Yr Total Cost', icp.recommended_3_year_price 'Recommended 3 Yr Price', (icp.recommended_3_year_price + icp.recommended_storage_price) 'Recommended 3 Yr Total Cost', icp.recommended_storage_price 'Recommended Storage Price ', icp.recommended_preferred_plan, icp.customer_recommended_vcpu_count 'Cust Recommended vcpu Count ', icp.customer_recommended_memory 'Cust Recommended Memory ', icp.customer_recommended_storage 'Cust Recommended Storage ', icp.customer_recommended_instance_type 'Cust Recommended Instance Type ', icp.customer_recommended_on_demand_price 'Cust Recommended On Demand Price', (icp.customer_recommended_on_demand_price + customer_recommended_storage_price) 'Cust Recommended On Demand Price', icp.customer_recommended_1_year_price 'Cust Recommended 1 Yr Price ', (icp.customer_recommended_1_year_price + customer_recommended_storage_price) 'Cust Recommended 1 Yr Total Cost ', icp.customer_recommended_3_year_price 'Cust Recommended 3 Yr Cost ', (icp.customer_recommended_3_year_price + customer_recommended_storage_price) 'Cust Recommended 3 Yr Total Cost ', icp.customer_recommended_storage_price 'Cust Recommended Storage Price', icp.customer_recommended_preferred_plan 'Cust Recommended Preferred Plan', uts.average_cpu_percent 'CPU Usage(%)', uts.average_memory_percent 'Memory Usage(%)', uts.average_storage_percent 'Storage Usage(%)', IFNULL(GROUP_CONCAT(DISTINCT sas.migration_type), ias.migration_type) 'Migration Type', tpt.region 'Cloud Region', tpt.storage_type 'Cloud Region', ias.migration_strategy 'OS Migration Strategy', ias.os_recommended_version 'OS Recommended Version', ias.eol_status 'OS EOSL Status', ias.server_type 'Server Type', cp.name 'Cloud Provider' FROM host h JOIN task ON task.id = h.task_id LEFT JOIN cloud_providers cp ON cp.enable = 'True' JOIN ip ON ip.host_id = h.id LEFT JOIN  application_host_mapping ahm ON ahm.host_id = h.id LEFT JOIN application app ON app.id = ahm.application_id LEFT JOIN instance_cloud_prices icp ON icp.host_id = h.id  AND cp.name = icp.cloud_provider LEFT JOIN  tco_page_template tpt ON tpt.id = icp.template_id  AND tpt.cloud_provider = cp.name LEFT JOIN utilization_summary uts ON uts.host_id = h.id LEFT JOIN instance_assessment_summary ias ON ias.host_id = h.id AND cp.name = ias.cloud_provider LEFT JOIN  service ON service.host_id = h.id LEFT JOIN  service_assessment_summary sas ON sas.service_id = service.id  AND sas.cloud_provider = cp.name WHERE h.status = 'success' AND h.historic = 0 AND task.account_id LIKE IFNULL(NULL, '%%') GROUP BY h.ip,cp.name;"} }
);

// Date : 22-Nov-2022 MHD-6850 Enhance the Procedure jobs to log the job execution history

db.block.update(
        {plugin:"MySQL" , name:"Job Execution Status(Utilization & Port Summary)"},
        { $set: { query: "select *  from ( (select job_name, job_number,min(db_created_datetime) StartTime ,max(db_created_datetime) EndTime ,timediff( max(db_created_datetime),min(db_created_datetime)) job_duration from discovery_jobs_status where job_name = 'SP_PORTSUMMARY_DETAILS' group by job_name, job_number order by job_number desc limit 6) union (select job_name, job_number,min(db_created_datetime) StartTime ,max(db_created_datetime) EndTime ,timediff( max(db_created_datetime),min(db_created_datetime)) job_duration from discovery_jobs_status where job_name = 'update_utilization_summary' group by job_name, job_number order by job_number desc limit 11) )as sub_query;"} }
);

// Date : 30-Nov-2022 MHD-5287 Updating the Application Interfacing Block
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Application Interfacing Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host.name AS 'Host Name', host.ip AS 'Local IP Address', (SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm1 JOIN host host1 ON host1.id = ahm1.host_id JOIN application app1 ON app1.id = ahm1.application_id WHERE app1.account_id LIKE IFNULL(NULL, '%%') AND host1.id = ps.host_id) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.foreign_address AS 'Foreign IP Address', ps.foreign_host_name AS 'Foreign Host Name', ps.undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm2 JOIN application app2 ON app2.id = ahm2.application_id JOIN host host2 ON host2.id = ahm2.host_id WHERE app2.account_id LIKE IFNULL(NULL, '%%') AND host2.ip = (SELECT ip AS ip_address FROM public_private_ip_lookup pip WHERE pip.private_ip = ps.foreign_address LIMIT 1) AND host2.historic = 0) AS 'Foreign Host Mapped Apps', network AS 'Network', ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.direction AS Direction, ps.used_interface AS UsedInterface, ps.status AS Status, ps.protocol AS Protocol, app.name AS 'Application Name With Environment' FROM port_summary ps JOIN host host ON ps.host_id = host.id JOIN application_host_mapping ahm1 ON host.id = ahm1.host_id JOIN application app ON app.id = ahm1.application_id AND host.id = ahm1.host_id AND host.historic = 0 AND host.status = 'success' AND app.account_id LIKE IFNULL(NULL, '%%') AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'ip' AND active = 1 AND VALUE = ps.local_address) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'port' AND active = 1 AND VALUE = ps.local_port_number) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'service' AND active = 1 AND VALUE = ps.local_service) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'ip' AND active = 1 AND VALUE = ps.foreign_address) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'port' AND active = 1 AND VALUE = ps.foreign_port_number) AND NOT EXISTS( SELECT value FROM port_exclusion WHERE type = 'service' AND active = 1 AND VALUE = ps.foreign_service) AND ahm1.application_id LIKE IFNULL(NULL, '%%');"} }
);


// Date : 02-Dec-2022 MHD-6948 Reference from table to view change across a few screens.
use aiops-dev;

db.block.update(
        {plugin:"MySQL" , name:"Software Report (Packages)"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hpkd.name  AS 'Package Name', hpkd.version AS 'Package Version',hpkd.repository  AS Repository from task dtl join host host on dtl.id=host.task_id join package_view hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success';"} }
);

db.block.update(
        {plugin:"MySQL" , name:"CronJobs - Windows"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname, sv.taskname as 'Task Name', sv.task_to_run as 'Task to Run', sv.author as 'Author', sv.run_as_user as 'Run as User', sv.scheduled_task_state as 'Scheduled Task State', sv.status as 'Status', sv.last_run_time as 'Last Run Time', sv.next_run_time as 'Next Run Time', sv.schedule_type as 'Schedule Type', sv.start_time as 'Start Time', sv.start_date as 'Start Date', sv.end_date as 'End Date' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled_view as sv ON host.id = sv.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success'  and host.platform ='Windows' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"CronJobs - linux"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname,sv.command as 'Command', sv.minute as 'Minute', sv.hour as 'Hour', sv.day_of_the_month as 'Day of the Month', sv.month_of_the_year as 'Month of the Year', sv.day_of_the_week as 'Day of the Week' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled_view as sv ON host.id = sv.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success'  and  host.platform ='Linux' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Package_Details"},
        { $set: { query: "SELECT host.ip as IP, host.name as Hostname, hpkd.name  AS 'Package Name', hpkd.version AS 'Package Version',hpkd.repository  AS Repository from task dtl join host host on dtl.id=host.task_id join package_view hpkd on host.id= hpkd.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id like IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Certificates"},
        { $set: { query: "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, replace(replace(crt.path, '//', '/'), '\\\\', '\\') AS Path, crt.certificate_name AS 'Certificate Name', replace(replace(crt.issuer, '//', '/'), '\\\\', '\\') AS Issuer, crt.not_after AS Not_After, crt.not_before AS 'Not Before', crt.serial_number AS SerialNumber, crt.thumb_print AS 'Thumb Print', crt.dns_name_list AS 'DNS Name List', replace(replace(crt.subject, '//', '/'), '\\\\', '\\') AS Subject, crt.version AS Version, crt.ps_provider AS 'PS Provider', crt.certificatecol AS Certificatecol,crt.db_updated_datetime as 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN certificate_view crt ON host.id = crt.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') and dtl.status!='deleted' AND host.historic=0 AND host.status = 'success' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Cron_Jobs_Windows"},
        { $set: { query: "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version, sv.taskname as 'Task Name', sv.task_to_run as 'Task to Run', sv.author as 'Author', sv.run_as_user as 'Run as User', sv.scheduled_task_state as 'Scheduled Task State', sv.status as 'Status', sv.last_run_time as 'Last Run Time', sv.next_run_time as 'Next Run Time', sv.schedule_type as 'Schedule Type', sv.start_time as 'Start Time', sv.start_date as 'Start Date', sv.end_date as 'End Date' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled_view as sv ON host.id = sv.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' and host.platform ='Windows' ;"} }
);

db.block.update(
        {plugin:"MySQL" , name:"Inventory_Cron_Jobs_Linux"},
        { $set: { query: "SELECT host.name AS Hostname,host.ip AS IP,host.domain as Domain,ip.data_center as Datacenter, ip.environment Environment,host.platform as Platform, host.operating_system as OperatingSystem,host.version as Version,sv.command as 'Command', sv.minute as 'Minute', sv.hour as 'Hour', sv.day_of_the_month as 'Day of the Month', sv.month_of_the_year as 'Month of the Year', sv.day_of_the_week as 'Day of the Week' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled_view as sv ON host.id = sv.host_id join ip on ip.host_id=host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic=0 AND host.status = 'success' and host.platform ='Linux' ;"} }
);


// End of MHD-6948 Reference from table to view change across a few screens.

// Date : 22-Dec-2022 MHD-7114,MHD-7132  Code Updates in dependency column
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Inventory_Dependency"},
        { $set: { query: "SELECT app.name AS 'Application Name', host_outer.ip AS 'Host IP', host_outer.name AS 'Host Name', host_outer.platform AS Platform, IF(host_outer.platform = 'Windows', CONCAT(host_outer.operating_system, ' ', host_outer.version), CONCAT(host_outer.operating_system, ' ', host_outer.release_version)) AS 'Operating System Version', COALESCE(service.name, ' ', service.version) AS 'ServiceName', service.type as 'Service Type', REPLACE(REPLACE(CONCAT((SELECT ifnull(GROUP_CONCAT(DISTINCT app1.name),'') FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id),',', (SELECT ifnull(GROUP_CONCAT(DISTINCT app2.name),'') FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id and ( port_summary.local_address NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'ip' and active =1 ) AND port_summary.foreign_address NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'ip' and active =1 ) AND ((port_summary.direction = 'incoming' AND port_summary.local_port_number NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'port') AND port_summary.local_service NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'service')) or (port_summary.direction = 'outgoing' AND port_summary.foreign_port_number NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'port') AND port_summary.foreign_service NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'service'))) )) AND host2.historic = 0)), concat(',',app.name),''), concat(app.name,','), '') AS 'Dependent Applications' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN service ON ahm.host_id = service.host_id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host_outer.id LIKE IFNULL(NULL, '%%') ;"} }
);
db.block.update(
        {plugin:"MySQL" , name:"Host Details With Service Count"},
        { $set: { query: "SELECT host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', IFNULL(ip.data_center, 'Others') AS 'Datacenter', IFNULL(ip.line_of_business, ' ') AS 'Line of Bussiness', IFNULL(ip.region, 'Others') AS 'Region', IFNULL(ip.environment, 'Others') AS 'Environment', host_outer.device_type AS 'Device Type', host_outer.instance_type AS 'Instance Type', host_outer.manufacturer AS Manufacturer, host_outer.product_name AS 'Product Name', host_outer.serial_number AS 'Serial No', host_outer.service_provider AS 'Service Provider', host_outer.bios_configuration AS 'BIOS Configuration', host_outer.instruction_set AS 'Instruction Set', host_outer.sku AS SKU, ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommendation AS 'OS Recommendation', ias.migration_strategy AS 'OS migration Strategy', ias.os_recommended_version AS 'OS Recommended Version', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', REPLACE(REPLACE(CONCAT((SELECT ifnull(GROUP_CONCAT(DISTINCT app1.name),'') FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id),',', (SELECT ifnull(GROUP_CONCAT(DISTINCT app2.name),'') FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id and ( port_summary.local_address NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'ip' and active =1 ) AND port_summary.foreign_address NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'ip' and active =1 ) AND ((port_summary.direction = 'incoming' AND port_summary.local_port_number NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'port') AND port_summary.local_service NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'service')) or (port_summary.direction = 'outgoing' AND port_summary.foreign_port_number NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'port') AND port_summary.foreign_service NOT IN (SELECT value FROM discovery.port_exclusion WHERE type = 'service'))) )) AND host2.historic = 0)), concat(',',app.name),''), concat(app.name,','), '') AS 'Discovered Dependent Apps', aas.migration_strategy AS 'Migration Strategy', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(*) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', group_concat(distinct app.name) as 'Tagged Applications' , cloud_providers.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN ip ON ip.host_id = host_outer.id LEFT JOIN cpu ON cpu.host_id = host_outer.id LEFT JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN service ON host_outer.id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cloud_providers.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cloud_providers.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cloud_providers.name WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') group by host_outer.id,cloud_providers.name;"} }
);
db.block.update(
        {plugin:"MySQL" , name:"Application Summary Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host_outer.name AS 'Host Name', host_outer.ip AS 'IP Address', host_outer.domain AS 'Domain Name', host_outer.platform AS Platform, host_outer.operating_system AS 'Operating System', CONCAT(host_outer.operating_system, ' ', host_outer.version) AS 'OS Version', ias.eol_status AS 'OS EOSL Status', ias.support_date AS 'OS Support Date', ias.server_type AS 'Server Type', TRIM(CONCAT_WS(' ', service.name, service.version)) AS 'ServiceName', service.type 'Service Type', sas.eol_status AS 'Service EOSL Status', sas.support_date AS 'Service Support Date', sas.recommendation AS 'Service Recommendation', sas.recommended_version AS 'Service Recommended Version', mssql_oracle.serverEdition AS 'DBServer Edition', mssql_oracle.sid AS 'SIDs', REPLACE(REPLACE(CONCAT((SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm2 LEFT JOIN application app1 ON app1.id = ahm2.application_id LEFT JOIN host host_inner ON host_inner.id = ahm2.host_id WHERE host_inner.id = host_outer.id), (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm4 JOIN host host2 ON host2.id = ahm4.host_id JOIN application app2 ON app2.id = ahm4.application_id WHERE host2.ip IN (SELECT foreign_address FROM port_summary WHERE port_summary.host_id = host_outer.id) AND host2.historic = 0)), app.name, ''), ',,', ',') AS 'Discovered Dependent Apps', (SELECT COUNT(*) FROM service WHERE host_id = host_outer.id) AS 'Service Count', (SELECT COUNT(DISTINCT application_id) FROM application_host_mapping ahm5 WHERE ahm5.host_id = host_outer.id) AS 'Tagged App Count', app.name AS 'Application With Environment', cp.name AS 'Cloud Provider' FROM task dtl JOIN host host_outer ON dtl.id = host_outer.task_id JOIN application_host_mapping ahm ON host_outer.id = ahm.host_id LEFT JOIN application app ON ahm.application_id = app.id LEFT JOIN cloud_providers cp ON cp.enable = 'True' LEFT JOIN service ON ahm.host_id = service.host_id LEFT JOIN instance_assessment_summary ias ON ias.host_id = host_outer.id AND ias.cloud_provider = cp.name LEFT JOIN service_assessment_summary sas ON sas.service_id = service.id AND sas.cloud_provider = cp.name LEFT JOIN application_assessment_summary aas ON aas.application_id = app.id AND aas.cloud_provider = cp.name LEFT JOIN (SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct ms.serverEdition) AS serverEdition, 'MSSQL' FROM  host h JOIN service ON service.host_id = h.id    AND service.type = 'Database'   AND service.name = 'mssql' JOIN mssql_service ms ON ms.hostid = h.id WHERE   h.historic = 0 AND ms.status = 'Completed'   group by host_id,service.id UNION ALL SELECT DISTINCT service.id AS service_id, h.id AS host_id, h.ip, h.name, group_concat(distinct ms.sid) AS SID, group_concat(distinct IF(IFNULL(ms.edition, '') = 'EE', 'Enterprise Edition', ms.edition)) AS serverEdition, 'Oracle' FROM host h JOIN service ON service.host_id = h.id AND service.type = 'Database' AND service.name = 'oracle' JOIN oracle_service ms ON ms.hostid = h.id WHERE h.historic = 0 AND ms.status = 'Completed'  group by h.id,service.id  ) AS mssql_oracle ON mssql_oracle.host_id = ahm.host_id AND mssql_oracle.service_id = service.id WHERE host_outer.historic = 0 AND host_outer.status = 'success' AND dtl.account_id LIKE IFNULL(NULL, '%%') AND app.id LIKE IFNULL(NULL, '%%') AND host_outer.id IN (SELECT ahm1.host_id FROM application_host_mapping ahm1 WHERE ahm1.application_id LIKE IFNULL(NULL, '%%')) ORDER BY cp.name;"} }
);

// End of MHD-7114,MHD-7132 Code Updates in dependency column

// Date : 11-Jan-2023 MHD:5290--Adding 'Avg CPU percentage' column from utilization_summary table and removed the 'Utilization percent' column due to data descrepency
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Inventory_CPU_Details"},
        { $set: { query: "SELECT host.name AS Hostname, host.ip AS IP, host.domain AS Domain, ip.data_center AS Datacenter, ip.environment Environment, host.platform AS Platform, host.operating_system AS 'Operating System', host.version AS Version, hcpud.model_name AS 'Model Name', hcpud.physical_processors AS 'Physical Processors', hcpud.physical_cores AS 'Physical Cores', hcpud.logical_processors AS 'Logical Processors', util.average_cpu_percent AS 'Avg CPU Percent', hcpud.db_updated_datetime AS 'Discovered Time' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN cpu hcpud ON host.id = hcpud.host_id join utilization_summary util on util.host_id=host.id JOIN ip ON ip.host_id = host.id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND dtl.status != 'deleted' AND host.historic = 0 AND host.status = 'success';"} }
);

// Date : 12-Jan-2023 MHD:4243--Displaying hyphen(-) instead of N/A
db.block.update(
        {plugin:"MySQL" , name:"CronJobs - Windows"},
        { $set: { query: "SELECT host.ip AS IP, host.name AS Hostname, sv.taskname AS 'Task Name', sv.task_to_run AS 'Task to Run', sv.author AS 'Author', sv.run_as_user AS 'Run as User', sv.scheduled_task_state AS 'Scheduled Task State', sv.status AS 'Status', if((sv.last_run_time)='N/A','-',sv.last_run_time) AS 'Last Run Time', if((sv.next_run_time)='N/A','-',sv.next_run_time) AS 'Next Run Time', sv.schedule_type AS 'Schedule Type', if((sv.start_time)='N/A','-',sv.start_time) AS 'Start Time', if((sv.start_date)='N/A','-',sv.start_date) AS 'Start Date', if((sv.end_date)='N/A','-',sv.end_date) AS 'End Date' FROM task dtl JOIN host host ON dtl.id = host.task_id JOIN scheduled_view AS sv ON host.id = sv.host_id WHERE dtl.account_id LIKE IFNULL(NULL, '%%') AND dtl.id LIKE IFNULL(NULL, '%%') AND host.id LIKE IFNULL(NULL, '%%') AND host.historic = 0 AND host.status = 'success' AND host.platform = 'Windows';"} }
);



// Date: 18-Jan-2023  Start MHD-7215- Additional DB assessments blocks and reports
use aiops-dev;

db.block.insert({
        "name"  : "AzureSQLDatabase Assessments","queryType" : "query","reportType" : "table", "query" : "SELECT  hostName , IpAddress , serviceName,status as AssessmentStatus ,max(case when name = 'AgentJobs' then value end) as `AgentJobs`,max(case when name = 'BulkInsert' then value end) as `BulkInsert`,max(case when name = 'ClrAssemblies' then value end) as `ClrAssemblies`,max(case when name = 'ComputeClause' then value end) as `ComputeClause`,max(case when name = 'CrossDatabaseReferences' then value end) as `CrossDatabaseReferences`,max(case when name = 'CryptographicProvider' then value end) as `CryptographicProvider`,max(case when name = 'DatabaseMail' then value end) as `DatabaseMail`,max(case when name = 'DatabasePrincipalAlias' then value end) as `DatabasePrincipalAlias`,max(case when name = 'DbCompatLevelLowerThanHundred' then value end) as `DbCompatLevelLowerThanHundred`,max(case when name = 'DisableDefCNSTCHK' then value end) as `DisableDefCNSTCHK`,max(case when name = 'FastFirstRowHint' then value end) as `FastFirstRowHint`,max(case when name = 'FileStream' then value end) as `FileStream`,max(case when name = 'LinkedServer' then value end) as `LinkedServer`,max(case when name = 'MIDatabaseSize' then value end) as `MIDatabaseSize`,max(case when name = 'MIHeterogeneousMSDTCTransactSQL' then value end) as `MIHeterogeneousMSDTCTransactSQL`,max(case when name = 'MIHomogeneousMSDTCTransactSQL' then value end) as `MIHomogeneousMSDTCTransactSQL`,max(case when name = 'ServerAudits' then value end) as `ServerAudits`,max(case when name = 'ServerCredentials' then value end) as `ServerCredentials`,max(case when name = 'ServerScopedTriggers' then value end) as `ServerScopedTriggers`,max(case when name = 'ServiceBroker' then value end) as `ServiceBroker`,max(case when name = 'SessionTraceFlags' then value end) as `SessionTraceFlags`,max(case when name = 'SystemProceduresUnsupported' then value end) as `SystemProceduresUnsupported`,max(case when name = 'WindowsAuthentication' then value end) as `WindowsAuthentication`,max(case when name = 'XpCmdshell' then value end) as `XpCmdshell` from ( select distinct h.name hostName, h.ip as IpAddress, s.id,s.name as serviceName , case when ar.service_id is null then 'Pending' when ar.value is null then 'Failed' else ar.value end as status, p.name, round(pv.value,2) as value from service s join host h on s.host_id = h.id left join assessment_result ar on s.id = ar.service_id left join assessment asmt on ar.assessment_id = asmt.id left join assessment_parameters ap on ap.assessment_id = ar.assessment_id left join parameter p on ap.parameter_id = p.id left join parameter_value pv on pv.parameter_id = p.id and pv.service_id = ar.service_id where h.historic=0 and s.name ='mssql' and h.status='success' and s.core_service=1 and s.service_discovery_status != 'Duplicate' and s.service_discovery_status != 'Failed' and asmt.name ='AzureSQLDatabase' and asmt.target_provider ='Azure' ) d group by id;", "account" : "account" , "plugin" : "MySQL", "blockType" : "Assessment Summary", "description" : "AzureSQLDatabase Assessments. Applicable for Azure Cloud only.", "existing" : "no"}) ;

db.block.insert({
        "name"  : "AzureManagedSQLInstance Assessments","queryType" : "query","reportType" : "table", "query" : "SELECT hostName , IpAddress , serviceName,status as AssessmentStatus ,max(case when name = 'DatabasePrincipalAlias' then value end) as `DatabasePrincipalAlias`,max(case when name = 'QueueReaderJob' then value end) as `QueueReaderJob`,max(case when name = 'FileStream' then value end) as `FileStream`,max(case when name = 'MIHomogeneousMSDTCTransactSQL' then value end) as `MIHomogeneousMSDTCTransactSQL`,max(case when name = 'ComputeClause' then value end) as `ComputeClause`,max(case when name = 'BulkInsert' then value end) as `BulkInsert`,max(case when name = 'DisableDefCNSTCHK' then value end) as `DisableDefCNSTCHK`,max(case when name = 'MultipleLogFiles' then value end) as `MultipleLogFiles`,max(case when name = 'MIDatabaseSize' then value end) as `MIDatabaseSize`,max(case when name = 'NumDbExceedsHundred' then value end) as `NumDbExceedsHundred`,max(case when name = 'XpCmdshell' then value end) as `XpCmdshell`,max(case when name = 'LinkedServerWithNonSQLProvider' then value end) as `LinkedServerWithNonSQLProvider`,max(case when name = 'ClrStrictSecurity' then value end) as `ClrStrictSecurity`,max(case when name = 'SystemProceduresUnsupported' then value end) as `SystemProceduresUnsupported`,max(case when name = 'TransactSqlJob' then value end) as `TransactSqlJob`,max(case when name = 'CryptographicProvider' then value end) as `CryptographicProvider`,max(case when name = 'PowerShellJob' then value end) as `PowerShellJob`,max(case when name = 'DbCompatLevelLowerThanHundred' then value end) as `DbCompatLevelLowerThanHundred`,max(case when name = 'AnalysisQueryJob' then value end) as `AnalysisQueryJob`,max(case when name = 'FastFirstRowHint' then value end) as `FastFirstRowHint`,max(case when name = 'SessionTraceFlags' then value end) as `SessionTraceFlags`,max(case when name = 'MergeJob' then value end) as `MergeJob`,max(case when name = 'WindowsAuthentication' then value end) as `WindowsAuthentication`,max(case when name = 'AssemblyFromFile' then value end) as `AssemblyFromFile`,max(case when name = 'AnalysisCommandJob' then value end) as `AnalysisCommandJob`,max(case when name = 'MIHeterogeneousMSDTCTransactSQL' then value end) as `MIHeterogeneousMSDTCTransactSQL` from ( select distinct h.name hostName, h.ip as IpAddress, s.id,s.name as serviceName , case when ar.service_id is null then 'Pending' when ar.value is null then 'Failed' else ar.value end as status, p.name, round(pv.value,2) as value from service s join host h on s.host_id = h.id left join assessment_result ar on s.id = ar.service_id left join assessment asmt on ar.assessment_id = asmt.id left join assessment_parameters ap on ap.assessment_id = ar.assessment_id left join parameter p on ap.parameter_id = p.id left join parameter_value pv on pv.parameter_id = p.id and pv.service_id = ar.service_id where h.historic=0 and s.name ='mssql' and h.status='success' and s.core_service=1 and s.service_discovery_status != 'Duplicate' and s.service_discovery_status != 'Failed' and asmt.name ='AzureManagedSQLInstance' and asmt.target_provider ='Azure' ) d group by id;", "account" : "account" , "plugin" : "MySQL", "blockType" : "Assessment Summary", "description" : "AzureManagedSQLInstance Assessments. Applicable for Azure Cloud only.", "existing" : "no"}) ;

db.account.find({plugin:"MySQL",schema:"discovery"}).forEach(
    function(x) {
        db.block.update(
            {plugin:"MySQL"},
            { $set: { account: x._id.valueOf(), "createdAt": new Date()} },
            { "multi" : true }
        );
    }
);

db.report.insert(
{
        "name" : "MSSQL-DBAssessments Azure",
        "description" : "",     "createdAt" : new Date(),"createdBy" : "matildaadmin@matildacloud.com","reportType" : "Detailed Report",
        "layout" : [
                        {"_id" : "74624ff8-dd25-6a8z-7xb8-09fc2e231800", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "AzureSQLDatabase Assessments",           "description" : "", "blockId" : "" }},
                        {"_id" : "74624ff8-dd25-6a8z-7xb8-09fc2e231801", "cols" : 2, "rows" : 1,"x" : 0,"y" : 0,"component" : { "title" : "AzureManagedSQLInstance Assessments",        "description" : "",  "blockId" : "" }}
                        ],
        "status" : "Not-Initiated",
        "_class" : "com.matildacloud.dashboard.models.Report"
}
);

db.block.find({"name":{$in: ["AzureSQLDatabase Assessments", "AzureManagedSQLInstance Assessments"]}}).forEach(
function(x)
{
        db.report.updateMany(
        {name:"MSSQL-DBAssessments Azure","layout.component.title":x.name},
        { $set:{'layout.$.component.blockId': x._id.valueOf()}}
        )
}
);

// End Date: 18-Jan-2023 MHD-7215- Additional DB assessments blocks and reports

// Date : 20-Jan-2023 MHD-4150 Updating the Application Interfacing Block
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Application Interfacing Details"},
        { $set: { query: "SELECT LEFT(app.name, LENGTH(app.name) - LOCATE(':', REVERSE(app.name))) AS 'Application Name', RIGHT(app.name, LOCATE(':', REVERSE(app.name)) - 1) AS 'Environment', host.name AS 'Host Name', host.ip AS 'Local IP Address', (SELECT GROUP_CONCAT(DISTINCT app1.name) FROM application_host_mapping ahm1 JOIN host host1 ON host1.id = ahm1.host_id JOIN application app1 ON app1.id = ahm1.application_id WHERE app1.account_id LIKE IFNULL(NULL, '%%') AND host1.id = ps.host_id) AS 'Host Mapped Apps', ps.local_service AS 'Local Service', ps.local_port_number AS 'Local Port', ps.foreign_address AS 'Foreign IP Address', ps.foreign_host_name AS 'Foreign Host Name', ps.undiscovered_host_name AS 'Undiscovered Host Name', (SELECT GROUP_CONCAT(DISTINCT app2.name) FROM application_host_mapping ahm2 JOIN application app2 ON app2.id = ahm2.application_id JOIN host host2 ON host2.id = ahm2.host_id WHERE app2.account_id LIKE IFNULL(NULL, '%%') AND host2.ip = (SELECT ip AS ip_address FROM public_private_ip_lookup pip WHERE pip.private_ip = ps.foreign_address LIMIT 1) AND host2.historic = 0) AS 'Foreign Host Mapped Apps', network AS 'Network', ps.foreign_service AS 'Foreign Service', ps.foreign_port_number AS 'Foreign Port', ps.direction AS Direction, ps.used_interface AS UsedInterface, ps.status AS Status, ps.protocol AS Protocol FROM port_summary ps JOIN host host ON ps.host_id = host.id JOIN application_host_mapping ahm1 ON host.id = ahm1.host_id JOIN application app ON app.id = ahm1.application_id AND host.id = ahm1.host_id AND host.historic = 0 AND host.status = 'success' AND app.account_id LIKE IFNULL(NULL, '%%') AND NOT EXISTS( SELECT value FROM port_exclusion WHERE active = 1 AND ((type = 'ip' AND value = ps.local_address) OR (type = 'ip' AND value = ps.foreign_address) OR (type = 'port' AND value = ps.local_port_number) OR (type = 'port' AND value = ps.foreign_port_number) OR (type = 'service' AND value = IFNULL(ps.local_service, '')) OR (type = 'service' AND value = IFNULL(ps.foreign_service, ''))));"} }
);

// Date : 20-Jan-2023 MHD:7200--Removing service related columns and respective joins from query due to data descrepency
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Instance Assessment Summary"},
        { $set: { query: "SELECT DISTINCT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS 'OS Version', ias.server_type AS 'Server Type', (SELECT GROUP_CONCAT(app.name) FROM application app JOIN application_host_mapping ahm ON app.id = ahm.application_id WHERE ahm.host_id = host.id) AS 'Applications', ias.cpu_utilization AS 'CPU Utilization', ias.memory_utilization AS 'Memory Utilization', ias.storage_utilization AS 'Storage Utilization', ias.instance_activity AS 'Instance Activity', ias.migration_priority AS 'Migration Priority', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommended_version AS 'OS Recommended Version', ias.migration_strategy AS 'Migration Strategy', ias.migration_type As 'Migration Type', ias.cloud_provider AS 'Cloud Provider' FROM host LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 AND host.status = 'success' GROUP BY host.id;"} }
);

// Date : 25-Jan-2023 MHD:4148
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Port collection Job Status"},
        { $set: { query: "SELECT host.ip, COUNT(port.id) AS 'Port Collection Count' FROM host JOIN task ON task.id = host.task_id LEFT JOIN port ON port.host_id = host.id WHERE host.historic = 0 and host.status='success' AND task.account_id LIKE IFNULL(NULL, '%%') GROUP BY host.ip ORDER BY 2 DESC;"} }
);

// Date : 02-Feb-2023 MHD:7200--Removing distinct from query due to data descrepency
use aiops-dev;
db.block.update(
        {plugin:"MySQL" , name:"Instance Assessment Summary"},
        { $set: { query: "SELECT host.name AS 'Host Name', host.ip AS 'IP Address', host.domain AS 'Domain Name', host.platform AS Platform, host.operating_system AS 'Operating System', CONCAT(host.operating_system, ' ', host.version) AS 'OS Version', ias.server_type AS 'Server Type', (SELECT GROUP_CONCAT(app.name) FROM application app JOIN application_host_mapping ahm ON app.id = ahm.application_id WHERE ahm.host_id = host.id) AS 'Applications', ias.cpu_utilization AS 'CPU Utilization', ias.memory_utilization AS 'Memory Utilization', ias.storage_utilization AS 'Storage Utilization', ias.instance_activity AS 'Instance Activity', ias.migration_priority AS 'Migration Priority', ias.eol_status AS 'OS EOL Status', ias.support_date AS 'OS Support End Date', ias.os_recommended_version AS 'OS Recommended Version', ias.migration_strategy AS 'Migration Strategy', ias.migration_type As 'Migration Type', ias.cloud_provider AS 'Cloud Provider' FROM host LEFT JOIN cloud_providers ON cloud_providers.enable = 'True' LEFT JOIN instance_assessment_summary ias ON ias.host_id = host.id AND ias.cloud_provider = cloud_providers.name WHERE host.historic = 0 AND host.status = 'success' GROUP BY host.id;"} }
);
